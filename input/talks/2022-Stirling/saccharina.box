Simulation sim {
  Box init {
    // Total plant biomass (g dw/m)
    &biomass   = 1.15
    // Proportional distribution in compartments
    &structure = 0.752
    &storeC    = 0.154
    &storeN    = 0.095
    // Whole-plant phosphorus concentration (g P/g dw)
    &concP     = 0.009
  }
  Calendar calendar {
    .begin = 17/12/2019 - 1
    .end   = 03/06/2020
  }
  Records env {
    .fileName = "data/env-2019.txt"

  }
  Box biomass {
    PlantCompartment structure {
      .concC = 0.21
      .concN = 0.02
      .dwInit = init[biomass]*init[structure]
      .dwIncrement = allocation[supplySdw]
    }
    PlantCompartment storeC {
      .concC = 0.47
      .concN = 0.00
      .dwInit = init[biomass]*init[storeC]
      .dwIncrement = allocation[supplyStoreCdw]
    }
    PlantCompartment storeN {
      .concC = 0.21
      .concN = 0.37
      .dwInit = init[biomass]*init[storeN]
      .dwIncrement = allocation[supplyStoreNdw]
    }
    Plant whole {
      .concCmax = 0.35
      .concNmax = 0.05
      .concPmax = 0.009
      .concPinit = init[concP]
      .concPallocated = allocation[concPallocated]
      .dws    = ../structure[dw   ] | ../storeC[dw   ] | ../storeN[dw   ]
      .Cs     = ../structure[C    ] | ../storeC[C    ] | ../storeN[C    ]
      .Ns     = ../structure[N    ] | ../storeC[N    ] | ../storeN[N    ]
      .concCs = ../structure[concC] | ../storeC[concC] | ../storeN[concC]
      .concNs = ../structure[concN] | ../storeC[concN] | ../storeN[concN]
    }
  }
  Box demand {
    DemandStructure structure {
      .g = 0.045
      .concC   = biomass/structure[concC]
      .concN   = biomass/structure[concN]
      .biomass = biomass/structure[dw]
      .phiT    = ./phiT[value]
      .phiSal  = ./phiSal[value]
      ScalingTemperature phiT {
        .T = env[T]
      }
      ScalingSalinity phiSal {
        .S = env[S]
      }
    }
    DemandStore storeC {
      .biomass  = biomass/storeC[dw]
      .concC    = biomass/storeC[concC]
      .concN    = biomass/storeC[concN]
      .biomassS = biomass/structure[dw]
      .w        = biomass/whole[wC]
      .wS       = biomass/whole[wS]
      .demandS  = ../structure[dw]
    }
    DemandStore storeN {
      .biomass  = biomass/storeN[dw]
      .concC    = biomass/storeN[concC]
      .concN    = biomass/storeN[concN]
      .biomassS = biomass/structure[dw]
      .w        = biomass/whole[wN]
      .wS       = biomass/whole[wS]
      .demandS  = ../structure[dw]
    }
    DemandMaintenance maintenance {
      .biomass = biomass/whole[dw]
      .T = env[T]
    }
    DemandBuilding cost {
      .demandS       = ../structure[dw]
      .demandStoreC  = ../storeC[dw]
      .demandStoreN  = ../storeN[dw]
    }
    DemandExudation exudation {
      .demands = ../structure[C]|../storeC[C]|../storeN[C]
      .eps = 0.26
    }
  }
  DemandTotal demandTotal {
    .dws = demand/*[dw]
    .Cs  = demand/*[C]
    .Ns  = demand/*[N]
    .biomass = biomass/whole[dw]
    .concP    = biomass/whole[concP]
    .concPmax = biomass/whole[concPmax]
  }
  Box supply {
    SupplyCarbon carbon {
      .alpha = 0.006
      .theta = 1 //0.8
      .phiN = ./scalingNitrogen[value]
      .phiP = ./scalingPhosphorus[value]
      .biomass = biomass/structure[dw]
      .I = env[E0]
      .demand = demandTotal[C]
      ScalingNitrogen scalingNitrogen {
        .concN = biomass/whole[concN]
        .concNmin = 0.005
        .concNopt = 0.020
      }
      ScalingPhosphorus scalingPhosphorus {
        .concP = biomass/whole[concP]
        .concPopt = 0.0027
      }
    }
    SupplyNitrogen nitrogen {
      .beta = 0.0002
      .biomass = biomass/structure[dw]
      .waterN = env[N]
      .demand = demandTotal[N]
    }
    SupplyPhosphorus phosphorus {
      .gamma = 0.0004
      .biomass = biomass/structure[dw]
      .waterP = env[P]
      .demand = demandTotal[P]
    }
  }
  Allocation allocation {
    .PC = supply/carbon[value]
    .UN = supply/nitrogen[value]
    .UP = supply/phosphorus[value]
    .CC = biomass/storeC[C]
    .CN = biomass/storeC[N]
    .NC = biomass/storeN[C]
    .NN = biomass/storeN[N]
    .DMC = demand/maintenance[C]
    .DSC = demand/structure[C]
    .DSN = demand/structure[N]
    .DCC = demand/storeC[C]
    .DCN = demand/storeC[N]
    .DNC = demand/storeN[C]
    .DNN = demand/storeN[N]
  }
  Calibration calibration {
    .obsFileName = "data/obs-calibration-2019.txt"
  }
  OutputR {
    .scripts = "saccharina.R"
    OutputText {
      .ports = calendar[date] | biomass/*[dw] | biomass/whole[concC] | biomass/whole[concN] | biomass/whole[concP] 
    }
  }
}