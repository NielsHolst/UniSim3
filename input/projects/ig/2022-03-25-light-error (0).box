Simulation greenhouse {
  .iterations = 1
  .steps = 5
  .stopIterations = FALSE
  .stopSteps = FALSE
  .useStopIterations = FALSE
  .useStopSteps = FALSE
  .silent = FALSE
  .unattended = FALSE
  //~iteration == 0
  //~step == 0
  //~finalStep == 0
  //~executionTime == 0
  //~hasError == FALSE
  //~errorMsg == ""
  Calendar calendar {
    .latitude = 55.3
    .longitude = 10.23
    .timeZone = 1
    .initialDateTime = "2001/2/16 00:00:00"
    .timeStep = 30
    .timeUnit = "s"
    .sample = 1
    //~date == 2001/1/1
    //~time == 00:00:00
    //~dateTime == "2001/1/1 00:00:00"
    //~timeStepSecs == 0.0
    //~timeStepDays == 0.0
    //~totalTimeSteps == 0
    //~totalTime == 0
    //~totalDays == 0.0
    //~dayOfYear == 0
    Sun sun {
      .latitude = calendar[latitude]
      .dayOfYear = calendar[dayOfYear]
      .time = calendar[time]
      //~dayLength == 0.0
      //~sinb == 0.0
      //~sunrise == 00:00:00
      //~sunset == 00:00:00
      //~solarConstant == 0.0
      //~angot == 0.0
      //~isDay == FALSE
      //~isNight == FALSE
    }
  }
  vg::Sensor sensor {
    .indoorsTemperatureIn = 19.2
    .indoorsRhIn = 76.0
    .indoorsCo2In = 1136.0
    .indoorsWindspeedIn = -999.0
    .outdoorsTemperatureIn = 4.6
    .outdoorsRhIn = 0.0
    .outdoorsCo2In = 415.0
    .outdoorsGlobalRadiationIn = 25.0
    .outdoorsWindSpeedIn = 2.4
    .soilTemperatureIn = -999.0
    .sinb = sun[sinb]
    //~indoorsTemperature == 0.0
    //~indoorsRh == 0.0
    //~indoorsAh == 0.0
    //~indoorsCo2 == 0.0
    //~indoorsWindspeed == 0.0
    //~outdoorsTemperature == 0.0
    //~outdoorsRh == 0.0
    //~outdoorsCo2 == 0.0
    //~outdoorsGlobalRadiation == 0.0
    //~outdoorsWindSpeed == 0.0
    //~soilTemperature == 0.0
  }
  vg::Outdoors outdoors {
    .co2 = sensor[outdoorsCo2]
    .temperature = sensor[outdoorsTemperature]
    .rh = sensor[outdoorsRh]
    .radiation = sensor[outdoorsGlobalRadiation]
    .propPar = 0.45
    .propUv = 0.07
    .windSpeed = sensor[outdoorsWindSpeed]
    .skyTemperature = ./skyTemperatureEstimate[temperature]
    //~par == 0.0
    //~ah == 0.0
    //~sh == 0.0
    //~soilTemperature == sensor[soilTemperature]
    SkyTemperature skyTemperatureEstimate {
      .intercept = 0.732
      .slope = 0.00635
      .airTemperature = sensor[outdoorsTemperature]
      .rh = sensor[indoorsRh]
      //~temperature == 0.0
      //~emissivity == 0.0
    }
    Box records {
    }
    Accumulator soilTemperature {
      .initial = ./initial[value]
      .change = ./controller[controlVariable]
      .minValue = -1.79769e+308
      .maxValue = 1.79769e+308
      //~value == 0.0
      //~signal == 0.0
      Hump initial {
        .x = calendar[dayOfYear]
        .x0 = 70.0
        .x1 = 365.0
        .ymin = 0.0
        .ymax = 16.0
        .ditch = FALSE
        //~value == 0.0
      }
      PidController controller {
        .sensedValue = ..[value]
        .desiredValue = outdoors[temperature]
        .Kprop = 5e-05
        .Kint = 0.0
        .Kderiv = 0.0
        .lookAhead = 0.0
        .minimum = -1.79769e+308
        .maximum = 1.79769e+308
        .timeStep = calendar[timeStepSecs]
        //~controlVariable == 0.0
        //~error == 0.0
        //~integral == 0.0
        //~derivative == 0.0
        //~eta == 0.0
      }
    }
  }
  Box construction {
    vg::Geometry geometry {
      .orientation = 90.0
      .numSpans = 21
      .spanWidth = 3.2
      .length = 68.0
      .height = 3.5
      .roofPitch = 22.0
      .reflection = 0.1
      //~width == 0.0
      //~groundArea == 0.0
      //~roofArea == 0.0
      //~sideWallsArea == 0.0
      //~endWallsArea == 0.0
      //~gablesArea == 0.0
      //~coverArea == 0.0
      //~coverPerGroundArea == 0.0
      //~volume == 0.0
      //~averageHeight == 0.0
      //~roofHeight == 0.0
    }
    vg::Shelter shelter {
      .screenAirExponent = 4.0
      .Uair = 2.27
      .screenUstateExponent = 32.0
      .screenUventilationSlope = 2.0
      .airTransmissivities = ./*/screens/airTransmissivity[value]
      .areas = ./*/area[value]
      .screenPerfection = 0.98
      //~screensAirTransmissivity == 0.0
      vg::ShelterFace roof1 {
        vg::ShelterFaceArea area {
          .roofArea = geometry[roofArea]
          .sideWallsArea = geometry[sideWallsArea]
          .endWallsArea = geometry[endWallsArea]
          .gablesArea = geometry[gablesArea]
          .groundArea = geometry[groundArea]
          //~value == 0.0
          //~relativeArea == 0.0
          //~areaPerGround == 0.0
        }
        vg::Cover cover {
          .swReflectivityTop = 0.0
          .swReflectivityBottom = 0.0
          .swTransmissivityTop = 1.0
          .swTransmissivityBottom = 1.0
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 1.0
          .lwTransmissivityBottom = 1.0
          .Utop = inf
          .Ubottom = 3.3
          .area = ../area[value]
          .heatCapacity = 8400.0
          .windSpeed = outdoors[windSpeed]
          .haze = 1.0
          .UwindMinimum = 2.8
          .UwindSlope = 1.2
          .UwindExponent = 0.8
          //~swAbsorptivityTop == 0.0
          //~swAbsorptivityBottom == 0.0
          //~lwAbsorptivityTop == 0.0
          //~lwAbsorptivityBottom == 0.0
        }
        vg::Screens screens {
          vg::ScreenRoof screen {
            .swReflectivityTop = 0.0
            .swReflectivityBottom = 0.7
            .swTransmissivityTop = 0.28
            .swTransmissivityBottom = 0.28
            .lwReflectivityTop = 0.0
            .lwReflectivityBottom = 0.7
            .lwTransmissivityTop = 0.28
            .lwTransmissivityBottom = 0.28
            .Utop = 1.247
            .Ubottom = 1.247
            .area = 0.0
            .heatCapacity = 2280.0
            .haze = 1.0
            .transmissivityAir = 0.0
            .state = 0.01
            .ventilation = 0.0
            .Uair = shelter[Uair]
            .UstateExponent = shelter[screenUstateExponent]
            .UventilationSlope = shelter[screenUventilationSlope]
            .groundArea = construction/geometry[groundArea]
            //~swAbsorptivityTop == 0.0
            //~swAbsorptivityBottom == 0.0
            //~lwAbsorptivityTop == 0.0
            //~lwAbsorptivityBottom == 0.0
            //~maxArea == 0.0
            //~swReflectivityTopNet == 0.0
            //~swReflectivityBottomNet == 0.0
            //~swTransmissivityTopNet == 0.0
            //~swTransmissivityBottomNet == 0.0
            //~lwReflectivityTopNet == 0.0
            //~lwReflectivityBottomNet == 0.0
            //~lwTransmissivityTopNet == 0.0
            //~lwTransmissivityBottomNet == 0.0
            //~swAbsorptivityTopNet == 0.0
            //~swAbsorptivityBottomNet == 0.0
            //~lwAbsorptivityTopNet == 0.0
            //~lwAbsorptivityBottomNet == 0.0
            //~emissivityTopNet == 0.0
            //~emissivityBottomNet == 0.0
            //~UtopNet == 0.0
            //~UbottomNet == 0.0
          }
          vg::ScreenRoof screen {
            .swReflectivityTop = 0.0
            .swReflectivityBottom = 0.99
            .swTransmissivityTop = 0.01
            .swTransmissivityBottom = 0.01
            .lwReflectivityTop = 0.0
            .lwReflectivityBottom = 0.99
            .lwTransmissivityTop = 0.01
            .lwTransmissivityBottom = 0.01
            .Utop = 1.247
            .Ubottom = 1.247
            .area = 0.0
            .heatCapacity = 2280.0
            .haze = 1.0
            .transmissivityAir = 0.0
            .state = 0.0
            .ventilation = 0.0
            .Uair = shelter[Uair]
            .UstateExponent = shelter[screenUstateExponent]
            .UventilationSlope = shelter[screenUventilationSlope]
            .groundArea = construction/geometry[groundArea]
            //~swAbsorptivityTop == 0.0
            //~swAbsorptivityBottom == 0.0
            //~lwAbsorptivityTop == 0.0
            //~lwAbsorptivityBottom == 0.0
            //~maxArea == 0.0
            //~swReflectivityTopNet == 0.0
            //~swReflectivityBottomNet == 0.0
            //~swTransmissivityTopNet == 0.0
            //~swTransmissivityBottomNet == 0.0
            //~lwReflectivityTopNet == 0.0
            //~lwReflectivityBottomNet == 0.0
            //~lwTransmissivityTopNet == 0.0
            //~lwTransmissivityBottomNet == 0.0
            //~swAbsorptivityTopNet == 0.0
            //~swAbsorptivityBottomNet == 0.0
            //~lwAbsorptivityTopNet == 0.0
            //~lwAbsorptivityBottomNet == 0.0
            //~emissivityTopNet == 0.0
            //~emissivityBottomNet == 0.0
            //~UtopNet == 0.0
            //~UbottomNet == 0.0
          }
          vg::ScreensAirTransmissivity airTransmissivity {
            .screenAirExponent = shelter[screenAirExponent]
            .states = ../*[state]
            .transmissivities = ../*[transmissivityAir]
            //~value == 0.0
          }
        }
        Vent vent {
          .length = construction/geometry[length]
          .width = 1.0
          .number = 1
          .transmissivity = 1.0
          //~area == 0.0
          //~effectiveArea == 0.0
        }
      }
      vg::ShelterFace roof2 {
        vg::ShelterFaceArea area {
          .roofArea = geometry[roofArea]
          .sideWallsArea = geometry[sideWallsArea]
          .endWallsArea = geometry[endWallsArea]
          .gablesArea = geometry[gablesArea]
          .groundArea = geometry[groundArea]
          //~value == 0.0
          //~relativeArea == 0.0
          //~areaPerGround == 0.0
        }
        vg::Cover cover {
          .swReflectivityTop = 0.0
          .swReflectivityBottom = 0.0
          .swTransmissivityTop = 1.0
          .swTransmissivityBottom = 1.0
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 1.0
          .lwTransmissivityBottom = 1.0
          .Utop = inf
          .Ubottom = 3.3
          .area = ../area[value]
          .heatCapacity = 8400.0
          .windSpeed = outdoors[windSpeed]
          .haze = 1.0
          .UwindMinimum = 2.8
          .UwindSlope = 1.2
          .UwindExponent = 0.8
          //~swAbsorptivityTop == 0.0
          //~swAbsorptivityBottom == 0.0
          //~lwAbsorptivityTop == 0.0
          //~lwAbsorptivityBottom == 0.0
        }
        vg::Screens screens {
          vg::ScreensAirTransmissivity airTransmissivity {
            .screenAirExponent = shelter[screenAirExponent]
            .states = ../*[state]
            .transmissivities = ../*[transmissivityAir]
            //~value == 0.0
          }
        }
        Vent vent {
          .length = construction/geometry[length]
          .width = 1.0
          .number = 1
          .transmissivity = 1.0
          //~area == 0.0
          //~effectiveArea == 0.0
        }
      }
      vg::ShelterFace side1 {
        vg::ShelterFaceArea area {
          .roofArea = geometry[roofArea]
          .sideWallsArea = geometry[sideWallsArea]
          .endWallsArea = geometry[endWallsArea]
          .gablesArea = geometry[gablesArea]
          .groundArea = geometry[groundArea]
          //~value == 0.0
          //~relativeArea == 0.0
          //~areaPerGround == 0.0
        }
        vg::Cover cover {
          .swReflectivityTop = 0.0
          .swReflectivityBottom = 0.0
          .swTransmissivityTop = 1.0
          .swTransmissivityBottom = 1.0
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 1.0
          .lwTransmissivityBottom = 1.0
          .Utop = inf
          .Ubottom = 3.3
          .area = ../area[value]
          .heatCapacity = 8400.0
          .windSpeed = outdoors[windSpeed]
          .haze = 1.0
          .UwindMinimum = 2.8
          .UwindSlope = 1.2
          .UwindExponent = 0.8
          //~swAbsorptivityTop == 0.0
          //~swAbsorptivityBottom == 0.0
          //~lwAbsorptivityTop == 0.0
          //~lwAbsorptivityBottom == 0.0
        }
        vg::Screens screens {
          vg::ScreensAirTransmissivity airTransmissivity {
            .screenAirExponent = shelter[screenAirExponent]
            .states = ../*[state]
            .transmissivities = ../*[transmissivityAir]
            //~value == 0.0
          }
        }
      }
      vg::ShelterFace side2 {
        vg::ShelterFaceArea area {
          .roofArea = geometry[roofArea]
          .sideWallsArea = geometry[sideWallsArea]
          .endWallsArea = geometry[endWallsArea]
          .gablesArea = geometry[gablesArea]
          .groundArea = geometry[groundArea]
          //~value == 0.0
          //~relativeArea == 0.0
          //~areaPerGround == 0.0
        }
        vg::Cover cover {
          .swReflectivityTop = 0.0
          .swReflectivityBottom = 0.0
          .swTransmissivityTop = 1.0
          .swTransmissivityBottom = 1.0
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 1.0
          .lwTransmissivityBottom = 1.0
          .Utop = inf
          .Ubottom = 3.3
          .area = ../area[value]
          .heatCapacity = 8400.0
          .windSpeed = outdoors[windSpeed]
          .haze = 1.0
          .UwindMinimum = 2.8
          .UwindSlope = 1.2
          .UwindExponent = 0.8
          //~swAbsorptivityTop == 0.0
          //~swAbsorptivityBottom == 0.0
          //~lwAbsorptivityTop == 0.0
          //~lwAbsorptivityBottom == 0.0
        }
        vg::Screens screens {
          vg::ScreensAirTransmissivity airTransmissivity {
            .screenAirExponent = shelter[screenAirExponent]
            .states = ../*[state]
            .transmissivities = ../*[transmissivityAir]
            //~value == 0.0
          }
        }
      }
      vg::ShelterFace end1 {
        vg::ShelterFaceArea area {
          .roofArea = geometry[roofArea]
          .sideWallsArea = geometry[sideWallsArea]
          .endWallsArea = geometry[endWallsArea]
          .gablesArea = geometry[gablesArea]
          .groundArea = geometry[groundArea]
          //~value == 0.0
          //~relativeArea == 0.0
          //~areaPerGround == 0.0
        }
        vg::Cover cover {
          .swReflectivityTop = 0.0
          .swReflectivityBottom = 0.0
          .swTransmissivityTop = 1.0
          .swTransmissivityBottom = 1.0
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 1.0
          .lwTransmissivityBottom = 1.0
          .Utop = inf
          .Ubottom = 3.3
          .area = ../area[value]
          .heatCapacity = 8400.0
          .windSpeed = outdoors[windSpeed]
          .haze = 1.0
          .UwindMinimum = 2.8
          .UwindSlope = 1.2
          .UwindExponent = 0.8
          //~swAbsorptivityTop == 0.0
          //~swAbsorptivityBottom == 0.0
          //~lwAbsorptivityTop == 0.0
          //~lwAbsorptivityBottom == 0.0
        }
        vg::Screens screens {
          vg::ScreensAirTransmissivity airTransmissivity {
            .screenAirExponent = shelter[screenAirExponent]
            .states = ../*[state]
            .transmissivities = ../*[transmissivityAir]
            //~value == 0.0
          }
        }
      }
      vg::ShelterFace end2 {
        vg::ShelterFaceArea area {
          .roofArea = geometry[roofArea]
          .sideWallsArea = geometry[sideWallsArea]
          .endWallsArea = geometry[endWallsArea]
          .gablesArea = geometry[gablesArea]
          .groundArea = geometry[groundArea]
          //~value == 0.0
          //~relativeArea == 0.0
          //~areaPerGround == 0.0
        }
        vg::Cover cover {
          .swReflectivityTop = 0.0
          .swReflectivityBottom = 0.0
          .swTransmissivityTop = 1.0
          .swTransmissivityBottom = 1.0
          .lwReflectivityTop = 0.0
          .lwReflectivityBottom = 0.0
          .lwTransmissivityTop = 1.0
          .lwTransmissivityBottom = 1.0
          .Utop = inf
          .Ubottom = 3.3
          .area = ../area[value]
          .heatCapacity = 8400.0
          .windSpeed = outdoors[windSpeed]
          .haze = 1.0
          .UwindMinimum = 2.8
          .UwindSlope = 1.2
          .UwindExponent = 0.8
          //~swAbsorptivityTop == 0.0
          //~swAbsorptivityBottom == 0.0
          //~lwAbsorptivityTop == 0.0
          //~lwAbsorptivityBottom == 0.0
        }
        vg::Screens screens {
          vg::ScreensAirTransmissivity airTransmissivity {
            .screenAirExponent = shelter[screenAirExponent]
            .states = ../*[state]
            .transmissivities = ../*[transmissivityAir]
            //~value == 0.0
          }
        }
      }
    }
    Box floor {
      +reflectivity = 0.6
      +Utop = 7.5
      +Ubottom = 0.1
      +heatCapacity = 42000.0
    }
  }
  Actuators actuators {
    Box co2Injection {
      +value = 0.
    }
    ActuatorVentilation ventilation {
      .minFlux = 0.0
      .windCoef = 50.0
      .temperatureCoef = 14.0
      .windSpeed = outdoors[windSpeed]
      .outdoorsTemperature = outdoors[temperature]
      .indoorsTemperature = sensor[indoorsTemperature]
      .effectiveVentArea|sum = shelter/*/vent[effectiveArea]
      .groundArea = construction/geometry[groundArea]
      //~flux == 0.0
      //~maxFlux == 0.0
      //~relative == 0.0
    }
    ActuatorHeatPipes heating {
      .temperature = 0.0
      .propConvection = 0.5
      .minTemperatures = ./pipes/*[minTemperature]
      .maxTemperatures = ./pipes/*[maxTemperature]
      .energyFluxes = ./pipes/*[energyFlux]
      //~minTemperature == 0.0
      //~maxTemperature == 0.0
      //~energyFluxConvection == 0.0
      //~energyFluxRadiation == 0.0
      //~energyFluxTotal == 0.0
      Box pipes {
        vg::PipeForced pipe {
          .Tair = sensor[indoorsTemperature]
          .innerDiameter = 41.0
          .waterVolume = 9.05034
          .flowRate = 30.0
          .minTemperature = 0.0
          .maxTemperature = 100.0
          .Tinflow = 48.0
          .k = 0.000166
          .b = 1.23
          .knownToutflow = 0.0
          //~transitTime == 0.0
          //~Toutflow == 0.0
          //~energyFlux == 0.0
        }
        vg::PipeForced pipe {
          .Tair = sensor[indoorsTemperature]
          .innerDiameter = 41.0
          .waterVolume = 9.05034
          .flowRate = 30.0
          .minTemperature = 0.0
          .maxTemperature = 100.0
          .Tinflow = 48.0
          .k = 0.000166
          .b = 1.23
          .knownToutflow = 0.0
          //~transitTime == 0.0
          //~Toutflow == 0.0
          //~energyFlux == 0.0
        }
      }
    }
    vg::GrowthLights growthLights {
      .swReflectivityTop = 0.0
      .swReflectivityBottom = 0.0
      .swTransmissivityTop = 1.0
      .swTransmissivityBottom = 1.0
      .lwReflectivityTop = 0.0
      .lwReflectivityBottom = 0.0
      .lwTransmissivityTop = 1.0
      .lwTransmissivityBottom = 1.0
      .Utop = inf
      .Ubottom = inf
      .area = construction/geometry[groundArea]
      .heatCapacity = 0.0
      .parFluxDown = 0.0
      .parFluxUp = 0.0
      .swFluxDown = 0.0
      .swFluxUp = 0.0
      .convectiveInflux = 0.0
      .conductiveInflux = 0.0
      .condensationRate = 0.0
      .maxTemperatureRateOfChange = 100.0
      .timeStep = calendar[timeStepSecs]
      .lightsCurrentlyOn = ./*[currentlyOn]
      .lightsParFluxDown = ./*[parFluxDown]
      .lightsSwFluxDown = ./*[swFluxDown]
      .lightsLwFluxDown = ./*[lwFluxDown]
      .lightsPowerUsage = ./*[powerUsage]
      //~swAbsorptivityTop == 0.0
      //~swAbsorptivityBottom == 0.0
      //~lwAbsorptivityTop == 0.0
      //~lwAbsorptivityBottom == 0.0
      //~parAbsorbedFromAbove == 0.0
      //~parAbsorbedFromBelow == 0.0
      //~parAbsorbed == 0.0
      //~swAbsorbedFromAbove == 0.0
      //~swAbsorbedFromBelow == 0.0
      //~swAbsorbed == 0.0
      //~lwAbsorbedFromAbove == 0.0
      //~lwAbsorbedFromBelow == 0.0
      //~lwAbsorbed == 0.0
      //~lwFluxDown == 0.0
      //~lwFluxUp == 0.0
      //~absorbed == 0.0
      //~latentHeat == 0.0
      //~temperature == 0.0
      //~temperatureTop == 0.0
      //~temperatureBottom == 0.0
      //~unusedInflux == 0.0
      //~currentlyOn == FALSE
      //~powerUsage == 0.0
      vg::GrowthLight growthLight {
        .swReflectivityTop = 0.0
        .swReflectivityBottom = 0.0
        .swTransmissivityTop = 1.0
        .swTransmissivityBottom = 1.0
        .lwReflectivityTop = 0.0
        .lwReflectivityBottom = 0.0
        .lwTransmissivityTop = 1.0
        .lwTransmissivityBottom = 1.0
        .Utop = inf
        .Ubottom = inf
        .area = construction/geometry[groundArea]
        .heatCapacity = 0.0
        .parFluxDown = 0.0
        .parFluxUp = 0.0
        .swFluxDown = 0.0
        .swFluxUp = 0.0
        .convectiveInflux = 0.0
        .conductiveInflux = 0.0
        .condensationRate = 0.0
        .maxTemperatureRateOfChange = 100.0
        .timeStep = calendar[timeStepSecs]
        .on = TRUE
        .intensity = 23.7439
        .parPhotonCoef = 1.611
        .propLw = 0.5
        .ageCorrectedEfficiency = 1.0
        .minPeriodOn = 0.0
        //~swAbsorptivityTop == 0.0
        //~swAbsorptivityBottom == 0.0
        //~lwAbsorptivityTop == 0.0
        //~lwAbsorptivityBottom == 0.0
        //~parAbsorbedFromAbove == 0.0
        //~parAbsorbedFromBelow == 0.0
        //~parAbsorbed == 0.0
        //~swAbsorbedFromAbove == 0.0
        //~swAbsorbedFromBelow == 0.0
        //~swAbsorbed == 0.0
        //~lwAbsorbedFromAbove == 0.0
        //~lwAbsorbedFromBelow == 0.0
        //~lwAbsorbed == 0.0
        //~lwFluxDown == 0.0
        //~lwFluxUp == 0.0
        //~absorbed == 0.0
        //~latentHeat == 0.0
        //~temperature == 0.0
        //~temperatureTop == 0.0
        //~temperatureBottom == 0.0
        //~unusedInflux == 0.0
        //~periodOn == 0.0
        //~currentlyOn == FALSE
        //~powerUsage == 0.0
      }
      vg::GrowthLight growthLight {
        .swReflectivityTop = 0.0
        .swReflectivityBottom = 0.0
        .swTransmissivityTop = 1.0
        .swTransmissivityBottom = 1.0
        .lwReflectivityTop = 0.0
        .lwReflectivityBottom = 0.0
        .lwTransmissivityTop = 1.0
        .lwTransmissivityBottom = 1.0
        .Utop = inf
        .Ubottom = inf
        .area = construction/geometry[groundArea]
        .heatCapacity = 0.0
        .parFluxDown = 0.0
        .parFluxUp = 0.0
        .swFluxDown = 0.0
        .swFluxUp = 0.0
        .convectiveInflux = 0.0
        .conductiveInflux = 0.0
        .condensationRate = 0.0
        .maxTemperatureRateOfChange = 100.0
        .timeStep = calendar[timeStepSecs]
        .on = TRUE
        .intensity = 23.7439
        .parPhotonCoef = 1.611
        .propLw = 0.5
        .ageCorrectedEfficiency = 1.0
        .minPeriodOn = 0.0
        //~swAbsorptivityTop == 0.0
        //~swAbsorptivityBottom == 0.0
        //~lwAbsorptivityTop == 0.0
        //~lwAbsorptivityBottom == 0.0
        //~parAbsorbedFromAbove == 0.0
        //~parAbsorbedFromBelow == 0.0
        //~parAbsorbed == 0.0
        //~swAbsorbedFromAbove == 0.0
        //~swAbsorbedFromBelow == 0.0
        //~swAbsorbed == 0.0
        //~lwAbsorbedFromAbove == 0.0
        //~lwAbsorbedFromBelow == 0.0
        //~lwAbsorbed == 0.0
        //~lwFluxDown == 0.0
        //~lwFluxUp == 0.0
        //~absorbed == 0.0
        //~latentHeat == 0.0
        //~temperature == 0.0
        //~temperatureTop == 0.0
        //~temperatureBottom == 0.0
        //~unusedInflux == 0.0
        //~periodOn == 0.0
        //~currentlyOn == FALSE
        //~powerUsage == 0.0
      }
    }
  }
  vg::EnergyBudget energyBudget {
    .greenhouseVolume = construction/geometry[volume]
    .roomTemperature = indoors/temperature[value]
    .pipeEnergyFluxConvection = actuators/heating[energyFluxConvection]
    .cropCoverage = crop[coverage]
    .withCrop = TRUE
    .keepConstantScreenTemperature = FALSE
    .outdoorsTemperature = outdoors[temperature]
    .soilTemperature = outdoors[soilTemperature]
    .timeStep = calendar[timeStepSecs]
    .precision = 0.001
    .step = /*[step]
    //~Uinside == 0.0
    //~Uoutside == 0.0
    //~iterSw == 0
    //~iterLw == 0
    //~iterPar == 0
    //~cropParFluxFromAbove == 0.0
    //~cropParFluxFromBelow == 0.0
    vg::HeatTransferSky sky {
      .swReflectivityTop = 0.0
      .swReflectivityBottom = 0.0
      .swTransmissivityTop = 0.0
      .swTransmissivityBottom = 0.0
      .lwReflectivityTop = 0.0
      .lwReflectivityBottom = 0.0
      .lwTransmissivityTop = 0.0
      .lwTransmissivityBottom = 0.0
      .Utop = inf
      .Ubottom = inf
      .area = construction/geometry[coverArea]
      .heatCapacity = 0.0
      .parFluxDown = 0.0
      .parFluxUp = 0.0
      .swFluxDown = 0.0
      .swFluxUp = 0.0
      .convectiveInflux = 0.0
      .conductiveInflux = 0.0
      .condensationRate = 0.0
      .maxTemperatureRateOfChange = 100.0
      .timeStep = calendar[timeStepSecs]
      .irradiation = outdoors[radiation]
      .propPar = outdoors[propPar]
      .propUv = outdoors[propUv]
      //~swAbsorptivityTop == 0.0
      //~swAbsorptivityBottom == 0.0
      //~lwAbsorptivityTop == 0.0
      //~lwAbsorptivityBottom == 0.0
      //~parAbsorbedFromAbove == 0.0
      //~parAbsorbedFromBelow == 0.0
      //~parAbsorbed == 0.0
      //~swAbsorbedFromAbove == 0.0
      //~swAbsorbedFromBelow == 0.0
      //~swAbsorbed == 0.0
      //~lwAbsorbedFromAbove == 0.0
      //~lwAbsorbedFromBelow == 0.0
      //~lwAbsorbed == 0.0
      //~lwFluxDown == 0.0
      //~lwFluxUp == 0.0
      //~absorbed == 0.0
      //~latentHeat == 0.0
      //~temperature == outdoors[skyTemperature]
      //~temperatureTop == outdoors[skyTemperature]
      //~temperatureBottom == outdoors[skyTemperature]
      //~unusedInflux == 0.0
    }
    vg::HeatTransferCover cover {
      .swReflectivityTop = 0.0
      .swReflectivityBottom = 0.0
      .swTransmissivityTop = 1.0
      .swTransmissivityBottom = 1.0
      .lwReflectivityTop = 0.0
      .lwReflectivityBottom = 0.0
      .lwTransmissivityTop = 1.0
      .lwTransmissivityBottom = 1.0
      .Utop = inf
      .Ubottom = inf
      .area = 0.0
      .heatCapacity = 0.0
      .parFluxDown = 0.0
      .parFluxUp = 0.0
      .swFluxDown = 0.0
      .swFluxUp = 0.0
      .convectiveInflux = 0.0
      .conductiveInflux = 0.0
      .condensationRate = waterBudget/condensationCover[vapourFlux]
      .maxTemperatureRateOfChange = 100.0
      .timeStep = calendar[timeStepSecs]
      .swReflectivityTopShelter = shelter/*/cover[swReflectivityTop]
      .swReflectivityBottomShelter = shelter/*/cover[swReflectivityBottom]
      .swTransmissivityTopShelter = shelter/*/cover[swTransmissivityTop]
      .swTransmissivityBottomShelter = shelter/*/cover[swTransmissivityBottom]
      .swAbsorptivityTopShelter = shelter/*/cover[swAbsorptivityTop]
      .swAbsorptivityBottomShelter = shelter/*/cover[swAbsorptivityBottom]
      .lwReflectivityTopShelter = shelter/*/cover[lwReflectivityTop]
      .lwReflectivityBottomShelter = shelter/*/cover[lwReflectivityBottom]
      .lwTransmissivityTopShelter = shelter/*/cover[lwTransmissivityTop]
      .lwTransmissivityBottomShelter = shelter/*/cover[lwTransmissivityBottom]
      .lwAbsorptivityTopShelter = shelter/*/cover[lwAbsorptivityTop]
      .lwAbsorptivityBottomShelter = shelter/*/cover[lwAbsorptivityBottom]
      .UtopShelter = shelter/*/cover[Utop]
      .UbottomShelter = shelter/*/cover[Ubottom]
      .areaShelter = shelter/*/cover[area]
      .heatCapacityShelter = shelter/*/cover[heatCapacity]
      .groundArea = geometry[groundArea]
      .coverPerGroundArea = construction/geometry[coverPerGroundArea]
      .indoorsTemperature = indoors/temperature[value]
      .skyTemperature = outdoors[skyTemperature]
      .outdoorsTemperature = outdoors[temperature]
      //~swAbsorptivityTop == 0.0
      //~swAbsorptivityBottom == 0.0
      //~lwAbsorptivityTop == 0.0
      //~lwAbsorptivityBottom == 0.0
      //~parAbsorbedFromAbove == 0.0
      //~parAbsorbedFromBelow == 0.0
      //~parAbsorbed == 0.0
      //~swAbsorbedFromAbove == 0.0
      //~swAbsorbedFromBelow == 0.0
      //~swAbsorbed == 0.0
      //~lwAbsorbedFromAbove == 0.0
      //~lwAbsorbedFromBelow == 0.0
      //~lwAbsorbed == 0.0
      //~lwFluxDown == 0.0
      //~lwFluxUp == 0.0
      //~absorbed == 0.0
      //~latentHeat == 0.0
      //~temperature == 0.0
      //~temperatureTop == 0.0
      //~temperatureBottom == 0.0
      //~unusedInflux == 0.0
      //~numFaces == 0
    }
    vg::HeatTransferPipe pipe {
      .swReflectivityTop = 0.0
      .swReflectivityBottom = 0.0
      .swTransmissivityTop = 1.0
      .swTransmissivityBottom = 1.0
      .lwReflectivityTop = 0.0
      .lwReflectivityBottom = 0.0
      .lwTransmissivityTop = 1.0
      .lwTransmissivityBottom = 1.0
      .Utop = inf
      .Ubottom = inf
      .area = construction/geometry[groundArea]
      .heatCapacity = 0.0
      .parFluxDown = 0.0
      .parFluxUp = 0.0
      .swFluxDown = 0.0
      .swFluxUp = 0.0
      .convectiveInflux = 0.0
      .conductiveInflux = 0.0
      .condensationRate = 0.0
      .maxTemperatureRateOfChange = 100.0
      .timeStep = calendar[timeStepSecs]
      .energyFluxRadiation = actuators/heating[energyFluxRadiation]
      //~swAbsorptivityTop == 0.0
      //~swAbsorptivityBottom == 0.0
      //~lwAbsorptivityTop == 0.0
      //~lwAbsorptivityBottom == 0.0
      //~parAbsorbedFromAbove == 0.0
      //~parAbsorbedFromBelow == 0.0
      //~parAbsorbed == 0.0
      //~swAbsorbedFromAbove == 0.0
      //~swAbsorbedFromBelow == 0.0
      //~swAbsorbed == 0.0
      //~lwAbsorbedFromAbove == 0.0
      //~lwAbsorbedFromBelow == 0.0
      //~lwAbsorbed == 0.0
      //~lwFluxDown == 0.0
      //~lwFluxUp == 0.0
      //~absorbed == 0.0
      //~latentHeat == 0.0
      //~temperature == actuators/heating[temperature]
      //~temperatureTop == 0.0
      //~temperatureBottom == 0.0
      //~unusedInflux == 0.0
    }
    vg::HeatTransferCrop crop {
      .swReflectivityTop = 0.0
      .swReflectivityBottom = 0.0
      .swTransmissivityTop = 1.0
      .swTransmissivityBottom = 1.0
      .lwReflectivityTop = 0.0
      .lwReflectivityBottom = 0.0
      .lwTransmissivityTop = 1.0
      .lwTransmissivityBottom = 1.0
      .Utop = inf
      .Ubottom = inf
      .area = construction/geometry[groundArea]
      .heatCapacity = 0.0
      .parFluxDown = 0.0
      .parFluxUp = 0.0
      .swFluxDown = 0.0
      .swFluxUp = 0.0
      .convectiveInflux = 0.0
      .conductiveInflux = 0.0
      .condensationRate = 0.0
      .maxTemperatureRateOfChange = 100.0
      .timeStep = calendar[timeStepSecs]
      .lai = /*/crop[lai]
      .swK = crop[k]
      .swScatteringCoef = 0.2
      .lwK = 0.8
      .lwScatteringCoef = 0.05
      .leafTemperature = crop/temperature[value]
      //~swAbsorptivityTop == 0.0
      //~swAbsorptivityBottom == 0.0
      //~lwAbsorptivityTop == 0.0
      //~lwAbsorptivityBottom == 0.0
      //~parAbsorbedFromAbove == 0.0
      //~parAbsorbedFromBelow == 0.0
      //~parAbsorbed == 0.0
      //~swAbsorbedFromAbove == 0.0
      //~swAbsorbedFromBelow == 0.0
      //~swAbsorbed == 0.0
      //~lwAbsorbedFromAbove == 0.0
      //~lwAbsorbedFromBelow == 0.0
      //~lwAbsorbed == 0.0
      //~lwFluxDown == 0.0
      //~lwFluxUp == 0.0
      //~absorbed == 0.0
      //~latentHeat == 0.0
      //~temperature == 0.0
      //~temperatureTop == 0.0
      //~temperatureBottom == 0.0
      //~unusedInflux == 0.0
    }
    vg::HeatTransferFloor floor {
      .swReflectivityTop = construction/floor[reflectivity]
      .swReflectivityBottom = construction/floor[reflectivity]
      .swTransmissivityTop = 0.0
      .swTransmissivityBottom = 0.0
      .lwReflectivityTop = construction/floor[reflectivity]
      .lwReflectivityBottom = construction/floor[reflectivity]
      .lwTransmissivityTop = 0.0
      .lwTransmissivityBottom = 0.0
      .Utop = construction/floor[Utop]
      .Ubottom = construction/floor[Ubottom]
      .area = construction/geometry[groundArea]
      .heatCapacity = construction/floor[heatCapacity]
      .parFluxDown = 0.0
      .parFluxUp = 0.0
      .swFluxDown = 0.0
      .swFluxUp = 0.0
      .convectiveInflux = 0.0
      .conductiveInflux = 0.0
      .condensationRate = 0.0
      .maxTemperatureRateOfChange = 100.0
      .timeStep = calendar[timeStepSecs]
      //~swAbsorptivityTop == 0.0
      //~swAbsorptivityBottom == 0.0
      //~lwAbsorptivityTop == 0.0
      //~lwAbsorptivityBottom == 0.0
      //~parAbsorbedFromAbove == 0.0
      //~parAbsorbedFromBelow == 0.0
      //~parAbsorbed == 0.0
      //~swAbsorbedFromAbove == 0.0
      //~swAbsorbedFromBelow == 0.0
      //~swAbsorbed == 0.0
      //~lwAbsorbedFromAbove == 0.0
      //~lwAbsorbedFromBelow == 0.0
      //~lwAbsorbed == 0.0
      //~lwFluxDown == 0.0
      //~lwFluxUp == 0.0
      //~absorbed == 0.0
      //~latentHeat == 0.0
      //~temperature == 0.0
      //~temperatureTop == 0.0
      //~temperatureBottom == 0.0
      //~unusedInflux == 0.0
    }
    Box indoors {
      vg::IndoorsVentilation ventilation {
        .fluxLeakageAlone = ./leakage[flux]
        .fluxVentilationAlone = actuators/ventilation[flux]
        .screensAirTransmissivity = shelter[screensAirTransmissivity]
        //~flux == 0.0
        //~fluxLeakage == 0.0
        //~fluxVentilation == 0.0
        vg::LeakageVentilation leakage {
          .leakage = 0.05
          .windSpeed = outdoors[windSpeed]
          //~flux == 0.0
        }
      }
      vg::IndoorsTemperature temperature {
        .keepConstant = TRUE
        .initTemperature = 20.0
        .convectiveInflux = 0.0
        .timeStep = calendar[timeStepSecs]
        .groundArea = geometry[groundArea]
        .volume = geometry[volume]
        .airInflux = indoors/ventilation[flux]
        .outdoorsTemperature = outdoors[temperature]
        //~value == 0.0
        //~advectiveEnergyFlux == 0.0
    }
  }
  vg::WaterBudget waterBudget {
    .conductance = ./*[conductance]
    .vapourFlux = ./*[vapourFlux]
    .gain = ./*[gain]
    //~conductanceSum == 0.0
    //~vapourFluxSum == 0.0
    //~gainSum == 0.0
    vg::VapourFluxVentilation ventilation {
      .timeStep = calendar[timeStepSecs]
      .airInflux = indoors/ventilation[flux]
      .averageHeight = geometry[averageHeight]
      .indoorsAh = indoors/humidity[ah]
      .outdoorsAh = outdoors[ah]
      //~conductance == 0.0
      //~vapourFlux == 0.0
      //~gain == 0.0
    }
    vg::VapourFluxTranspiration transpiration {
      //~conductance == crop/transpiration[conductance]
      //~vapourFlux == crop/transpiration[vapourFlux]
      //~gain == crop/transpiration[gain]
    }
    vg::VapourFluxCondensationCover condensationCrop {
      .coverPerGroundArea = geometry[coverPerGroundArea]
      .coverTemperature = energyBudget/cover[temperature]
      .indoorsTemperature = indoors/temperature[value]
      .indoorsAh = indoors/humidity[ah]
      //~conductance == 0.0
      //~vapourFlux == 0.0
      //~gain == 0.0
      //~surfaceSah == 0.0
    }
    vg::VapourFluxCondensationCover condensationCover {
      .coverPerGroundArea = geometry[coverPerGroundArea]
      .coverTemperature = energyBudget/cover[temperature]
      .indoorsTemperature = indoors/temperature[value]
      .indoorsAh = indoors/humidity[ah]
      //~conductance == 0.0
      //~vapourFlux == 0.0
      //~gain == 0.0
      //~surfaceSah == 0.0
    }
    vg::VapourFluxCondensationScreens condensationScreens {
      .conductances = ./*[conductance]
      .vapourFluxes = ./*[vapourFlux]
      .gains = ./*[gain]
      //~conductance == 0.0
      //~vapourFlux == 0.0
      //~gain == 0.0
    }
  }
  vg::Indoors indoors {
    vg::IndoorsCo2 co2 {
      .outdoorsCo2 = 1136.0
      .airFlux = 0.0
      .injectionRate = 0.0
      .assimilation = crop/photosynthesis[Pg]
      .averageHeight = geometry[averageHeight]
      .timeStep = 0.0
      //~value == 0.0
    }
    vg::IndoorsHumidity humidity {
      .conductance = waterBudget[conductanceSum]
      .vapourFlux = waterBudget[vapourFluxSum]
      .gain = waterBudget[gainSum]
      .temperature = indoors/temperature[value]
      .height = geometry[averageHeight]
      .timeStep = calendar[timeStepSecs]
      //~rh == 0.0
      //~ah == 0.0
      //~ahEq == 0.0
      //~timeConstant == 0.0
      //~surplusAh == 0.0
      //~netVapourFlux == 0.0
    }
    vg::IndoorsWindSpeed windSpeed {
      .ventilation = indoors/ventilation[flux]
      .averageHeight = geometry[averageHeight]
      .minimumValue = 0.1
      //~value == 0.0
    }
  }
  vg::Crop crop {
    .lai = 3.0
    .coverage = 1.0
    .k = 0.7
    .gammaStar = 48.95
    .Jmax = 115.67
    .lightRespiration = 0.29
    .ballBerryIntercept = 0.106
    .ballBerrySlope = 1.64
    vg::LeafWindSpeed leafWindSpeed {
      .indoorsWindSpeedMinimum = 0.025
      .indoorsWindSpeed = indoors/windSpeed[value]
      //~value == 0.0
    }
    vg::BoundaryLayerResistanceStanghellini boundaryLayerResistance {
      .leafDimension = 0.025
      .leafWindSpeed = ../leafWindSpeed[value]
      .leafTemperature = ../temperature[value]
      .indoorsTemperature = indoors/temperature[value]
      //~rH2O == 0.0
      //~rCo2 == 0.0
    }
    vg::LeafTranspiration transpiration {
      .lai = ..[lai]
      .cropCoverage = crop[coverage]
      .indoorsAh = indoors/humidity[ah]
      .radiationAbsorbed = energyBudget/crop[absorbed]
      .leafTemperature = ../temperature[value]
      .rsH2O|mean = ../photosynthesis/*/stomatalResistance[rH2O]
      .rbH2O = ../boundaryLayerResistance[rH2O]
      //~conductance == 0.0
      //~vapourFlux == 0.0
      //~gain == 0.0
      //~leafAh == 0.0
    }
    vg::LeafTemperature temperature {
      .indoorsTemperature = indoors/temperature[value]
      .indoorsRh = indoors/humidity[rh]
      .rsH2O|mean = ../photosynthesis/*/stomatalResistance[rH2O]
      .rbH2O = ../boundaryLayerResistance[rH2O]
      .radiationAbsorbed = energyBudget/crop[absorbed]
      .lai = /*/crop[lai]
      //~value == 0.0
    }
    vg::CanopyPhotosynthesis photosynthesis {
      .lai = /*/crop[lai]
      .leafAn = ./*/leafPhotosynthesis[An]
      .leafAg = ./*/leafPhotosynthesis[Ag]
      .growthRespiration = 0.3
      //~An == 0.0
      //~Ag == 0.0
      //~Ar == 0.0
      //~Pn == 0.0
      //~Pg == 0.0
      //~Pr == 0.0
      Box top {
        IntercellularCo2 intercellularCo2 {
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2]
          .stomatalResistance = ../stomatalResistance[rCo2]
          .indoorsCo2 = indoors/co2[value]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          //~value == 0.0
          //~ci == 0.0
        }
        LeafParAbsorbed parAbsorbed {
          .parFlux = energyBudget[cropParFluxFromAbove]
          .k = /*/crop[k]
          .lai = /*/crop[lai]
          //~value == 0.0
        }
        LeafRespiration respiration {
          .leafTemperature = crop/temperature[value]
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed]
          .RL = crop[lightRespiration]
          .darknessThreshold = 5.0
          .Q10 = 1.92
          //~value == 0.0
        }
        LeafPhotosynthesisAj Aj {
          .gammaStar = crop[gammaStar]
          .Jmax = crop[Jmax]
          .k = crop[k]
          .leafTemperature = crop/temperature[value]
          .intercellularCo2 = ../intercellularCo2[value]
          .parAbsorbed = ../parAbsorbed[value]
          .respiration = ../respiration[value]
          //~JmaxTemp == 0.0
          //~J == 0.0
          //~value == 0.0
        }
        StomatalResistanceBallBerry stomatalResistance {
          .g0 = crop[ballBerryIntercept]
          .g1 = crop[ballBerrySlope]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          .rh = indoors/humidity[rh]
          .ca = indoors/co2[value]
          //~rH2O == 0.0
          //~rCo2 == 0.0
        }
        LeafPhotosynthesis leafPhotosynthesis {
          .leafAj = ../Aj[value]
          .leafAr = ../respiration[value]
          //~An == 0.0
          //~Ag == 0.0
          //~Ar == 0.0
        }
      }
      Box mid {
        IntercellularCo2 intercellularCo2 {
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2]
          .stomatalResistance = ../stomatalResistance[rCo2]
          .indoorsCo2 = indoors/co2[value]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          //~value == 0.0
          //~ci == 0.0
        }
        LeafParAbsorbed parAbsorbed {
          .parFlux = energyBudget[cropParFluxFromAbove]
          .k = /*/crop[k]
          .lai = /*/crop[lai]
          //~value == 0.0
        }
        LeafRespiration respiration {
          .leafTemperature = crop/temperature[value]
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed]
          .RL = crop[lightRespiration]
          .darknessThreshold = 5.0
          .Q10 = 1.92
          //~value == 0.0
        }
        LeafPhotosynthesisAj Aj {
          .gammaStar = crop[gammaStar]
          .Jmax = crop[Jmax]
          .k = crop[k]
          .leafTemperature = crop/temperature[value]
          .intercellularCo2 = ../intercellularCo2[value]
          .parAbsorbed = ../parAbsorbed[value]
          .respiration = ../respiration[value]
          //~JmaxTemp == 0.0
          //~J == 0.0
          //~value == 0.0
        }
        StomatalResistanceBallBerry stomatalResistance {
          .g0 = crop[ballBerryIntercept]
          .g1 = crop[ballBerrySlope]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          .rh = indoors/humidity[rh]
          .ca = indoors/co2[value]
          //~rH2O == 0.0
          //~rCo2 == 0.0
        }
        LeafPhotosynthesis leafPhotosynthesis {
          .leafAj = ../Aj[value]
          .leafAr = ../respiration[value]
          //~An == 0.0
          //~Ag == 0.0
          //~Ar == 0.0
        }
      }
      Box bottom {
        IntercellularCo2 intercellularCo2 {
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2]
          .stomatalResistance = ../stomatalResistance[rCo2]
          .indoorsCo2 = indoors/co2[value]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          //~value == 0.0
          //~ci == 0.0
        }
        LeafParAbsorbed parAbsorbed {
          .parFlux = energyBudget[cropParFluxFromAbove]
          .k = /*/crop[k]
          .lai = /*/crop[lai]
          //~value == 0.0
        }
        LeafRespiration respiration {
          .leafTemperature = crop/temperature[value]
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed]
          .RL = crop[lightRespiration]
          .darknessThreshold = 5.0
          .Q10 = 1.92
          //~value == 0.0
        }
        LeafPhotosynthesisAj Aj {
          .gammaStar = crop[gammaStar]
          .Jmax = crop[Jmax]
          .k = crop[k]
          .leafTemperature = crop/temperature[value]
          .intercellularCo2 = ../intercellularCo2[value]
          .parAbsorbed = ../parAbsorbed[value]
          .respiration = ../respiration[value]
          //~JmaxTemp == 0.0
          //~J == 0.0
          //~value == 0.0
        }
        StomatalResistanceBallBerry stomatalResistance {
          .g0 = crop[ballBerryIntercept]
          .g1 = crop[ballBerrySlope]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          .rh = indoors/humidity[rh]
          .ca = indoors/co2[value]
          //~rH2O == 0.0
          //~rCo2 == 0.0
        }
        LeafPhotosynthesis leafPhotosynthesis {
          .leafAj = ../Aj[value]
          .leafAr = ../respiration[value]
          //~An == 0.0
          //~Ag == 0.0
          //~Ar == 0.0
        }
      }
    }
    vg::BigLeafPhotosynthesis bigLeaf {
      .leafAn = ./leaf/leafPhotosynthesis[An]
      .leafAg = ./leaf/leafPhotosynthesis[Ag]
      .growthRespiration = 0.3
      //~An == 0.0
      //~Ag == 0.0
      //~Ar == 0.0
      //~Pn == 0.0
      //~Pg == 0.0
      //~Pr == 0.0
      Box leaf {
        IntercellularCo2 intercellularCo2 {
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2]
          .stomatalResistance = ../stomatalResistance[rCo2]
          .indoorsCo2 = indoors/co2[value]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          //~value == 0.0
          //~ci == 0.0
        }
        LeafParAbsorbed parAbsorbed {
          .parFlux = energyBudget[cropParFluxFromAbove]
          .k = /*/crop[k]
          .lai = /*/crop[lai]
          //~value == 0.0
        }
        LeafRespiration respiration {
          .leafTemperature = crop/temperature[value]
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed]
          .RL = crop[lightRespiration]
          .darknessThreshold = 5.0
          .Q10 = 1.92
          //~value == 0.0
        }
        LeafPhotosynthesisAj Aj {
          .gammaStar = crop[gammaStar]
          .Jmax = crop[Jmax]
          .k = crop[k]
          .leafTemperature = crop/temperature[value]
          .intercellularCo2 = ../intercellularCo2[value]
          .parAbsorbed = ../parAbsorbed[value]
          .respiration = ../respiration[value]
          //~JmaxTemp == 0.0
          //~J == 0.0
          //~value == 0.0
        }
        StomatalResistanceBallBerry stomatalResistance {
          .g0 = crop[ballBerryIntercept]
          .g1 = crop[ballBerrySlope]
          .leafPhotosynthesis = ../leafPhotosynthesis[An]
          .rh = indoors/humidity[rh]
          .ca = indoors/co2[value]
          //~rH2O == 0.0
          //~rCo2 == 0.0
        }
        LeafPhotosynthesis leafPhotosynthesis {
          .leafAj = ../Aj[value]
          .leafAr = ../respiration[value]
          //~An == 0.0
          //~Ag == 0.0
          //~Ar == 0.0
        }
      }
    }
  }
  vg::Budget budget {
  }
  OutputR output {
    vg::Outputs p {
    }
    PageR  {
      .xAxis = (calendar[dateTime])
      PlotR  {
        .ports = (output/p[*])
        .ncol = 4
      }
    }
  }
}
