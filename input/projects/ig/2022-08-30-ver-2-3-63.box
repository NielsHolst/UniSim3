Simulation greenhouse { //1507
  Calendar calendar { //30
    .latitude = 55.56 // #12
    .longitude = 12.21 // #13
    .timeZone = 1.0 // #14
    .begin = 2001/02/16T00:00:00 // #15
    .end = null // #16
    .timeStep = 30 // #17
    .timeUnit = "s" // #18
    Sun sun { //11
      .latitude = calendar[latitude] // #0
      .dayOfYear = calendar[dayOfYear] // #1
      .time = calendar[time] // #2
    }
  }
  vg::Sensor sensor { //53
    .indoorsTemperatureIn = 25.5008 // #31
    .indoorsRhIn = 64.5042 // #32
    .indoorsCo2In = 375.368 // #33
    .indoorsWindspeedIn = -999.0 // #34
    .outdoorsTemperatureIn = 16.4656 // #35
    .outdoorsRhIn = 0.0 // #36
    .outdoorsCo2In = 415.0 // #37
    .outdoorsGlobalRadiationIn = 246.218 // #38
    .outdoorsWindSpeedIn = 2.30315 // #39
    .soilTemperatureIn = -999.0 // #40
    .sinb = sun[sinb] // #41
  }
  vg::Outdoors outdoors { //104
    .co2 = sensor[outdoorsCo2] // #92
    .temperature = sensor[outdoorsTemperature] // #93
    .rh = sensor[outdoorsRh] // #94
    .radiation = sensor[outdoorsGlobalRadiation] // #95
    .propPar = 0.45 // #96
    .propUv = 0.07 // #97
    .windSpeed = sensor[outdoorsWindSpeed] // #98
    .skyTemperature = ./skyTemperatureEstimate[temperature] // #99
    SkyTemperature skyTemperatureEstimate { //60
      .intercept = 0.732 // #54
      .slope = 0.00635 // #55
      .airTemperature = sensor[outdoorsTemperature] // #56
      .rh = sensor[indoorsRh] // #57
    }
    Box records { //61
    }
    Accumulator soilTemperature { //91
      .initial = ./initial[value] // #85
      .change = ./controller[controlVariable] // #86
      .minValue = -1.79769e+308 // #87
      .maxValue = 1.79769e+308 // #88
      Hump initial { //69
        .x = calendar[dayOfYear] // #62
        .x0 = 70 // #63
        .x1 = 365 // #64
        .ymin = 0 // #65
        .ymax = 16 // #66
        .ditch = FALSE // #67
      }
      PidController controller { //84
        .sensedValue = ..[value] // #70
        .desiredValue = outdoors[temperature] // #71
        .Kprop = 5e-05 // #72
        .Kint = 0.0 // #73
        .Kderiv = 0.0 // #74
        .lookAhead = 0.0 // #75
        .minimum = -1.79769e+308 // #76
        .maximum = 1.79769e+308 // #77
        .timeStep = calendar[timeStepSecs] // #78
      }
    }
  }
  Box construction { //548
    vg::Geometry geometry { //123
      .orientation = 90.0 // #105
      .numSpans = 1 // #106
      .spanWidth = 20.0 // #107
      .length = 75.0 // #108
      .height = 4.0 // #109
      .roofPitch = 26.0 // #110
      .reflection = 0.2 // #111
    }
    vg::Shelter shelter { //542
      .screenAirExponent = 4.0 // #534
      .Uair = 2.27 // #535
      .screenUstateExponent = 32.0 // #536
      .screenUventilationSlope = 2.0 // #537
      .airTransmissivities = ./*/screens/airTransmissivity[value] // #538
      .areas = ./*/area[value] // #539
      .screenPerfection = 0.98 // #540
      vg::ShelterFace roof1 { //210
        vg::ShelterFaceArea area { //132
          .roofArea = geometry[roofArea] // #124
          .sideWallsArea = geometry[sideWallsArea] // #125
          .endWallsArea = geometry[endWallsArea] // #126
          .gablesArea = geometry[gablesArea] // #127
          .groundArea = geometry[groundArea] // #128
        }
        vg::Cover cover { //154
          .swReflectivityTop = 0.3 // #133
          .swReflectivityBottom = 0.3 // #134
          .swTransmissivityTop = 0.6 // #135
          .swTransmissivityBottom = 0.6 // #136
          .lwReflectivityTop = 0.7 // #137
          .lwReflectivityBottom = 0.7 // #138
          .lwTransmissivityTop = 0.2 // #139
          .lwTransmissivityBottom = 0.2 // #140
          .Utop = 6.5 // #141
          .Ubottom = 6.5 // #142
          .area = ../area[value] // #143
          .heatCapacity = 8400.0 // #144
          .windSpeed = outdoors[windSpeed] // #149
          .haze = 1.0 // #150
          .UwindMinimum = 2.8 // #151
          .UwindSlope = 1.2 // #152
          .UwindExponent = 0.8 // #153
        }
        vg::Screens screens { //202
          ScreenRoof layer1 { //196
            .swReflectivityTop = -5.55112e-17 // #155
            .swReflectivityBottom = 0.65 // #156
            .swTransmissivityTop = 0.33 // #157
            .swTransmissivityBottom = 0.33 // #158
            .lwReflectivityTop = -5.55112e-17 // #159
            .lwReflectivityBottom = -5.55112e-17 // #160
            .lwTransmissivityTop = 0.33 // #161
            .lwTransmissivityBottom = 0.33 // #162
            .Utop = 3.25 // #163
            .Ubottom = 3.25 // #164
            .heatCapacity = 2280.0 // #166
            .haze = 1.0 // #171
            .transmissivityAir = 0.0 // #172
            .state = 0.0 // #173
            .ventilation = indoors/ventilation[flux] // #174
            .Uair = shelter[Uair] // #175
            .UstateExponent = shelter[screenUstateExponent] // #176
            .UventilationSlope = shelter[screenUventilationSlope] // #177
            .groundArea = construction/geometry[groundArea] // #195
          }
          vg::ScreensAirTransmissivity airTransmissivity { //201
            .screenAirExponent = shelter[screenAirExponent] // #197
            .states = ../*[state] // #198
            .transmissivities = ../*[transmissivityAir] // #199
          }
        }
        Vent vent { //209
          .length = construction/geometry[length] // #203
          .width = 1 // #204
          .number = 1 // #205
          .transmissivity = 1.0 // #206
        }
      }
      vg::ShelterFace roof2 { //297
        vg::ShelterFaceArea area { //219
          .roofArea = geometry[roofArea] // #211
          .sideWallsArea = geometry[sideWallsArea] // #212
          .endWallsArea = geometry[endWallsArea] // #213
          .gablesArea = geometry[gablesArea] // #214
          .groundArea = geometry[groundArea] // #215
        }
        vg::Cover cover { //241
          .swReflectivityTop = 0.3 // #220
          .swReflectivityBottom = 0.3 // #221
          .swTransmissivityTop = 0.6 // #222
          .swTransmissivityBottom = 0.6 // #223
          .lwReflectivityTop = 0.7 // #224
          .lwReflectivityBottom = 0.7 // #225
          .lwTransmissivityTop = 0.2 // #226
          .lwTransmissivityBottom = 0.2 // #227
          .Utop = 6.5 // #228
          .Ubottom = 6.5 // #229
          .area = ../area[value] // #230
          .heatCapacity = 8400.0 // #231
          .windSpeed = outdoors[windSpeed] // #236
          .haze = 1.0 // #237
          .UwindMinimum = 2.8 // #238
          .UwindSlope = 1.2 // #239
          .UwindExponent = 0.8 // #240
        }
        vg::Screens screens { //289
          ScreenRoof layer1 { //283
            .swReflectivityTop = -5.55112e-17 // #242
            .swReflectivityBottom = 0.65 // #243
            .swTransmissivityTop = 0.33 // #244
            .swTransmissivityBottom = 0.33 // #245
            .lwReflectivityTop = -5.55112e-17 // #246
            .lwReflectivityBottom = -5.55112e-17 // #247
            .lwTransmissivityTop = 0.33 // #248
            .lwTransmissivityBottom = 0.33 // #249
            .Utop = 3.25 // #250
            .Ubottom = 3.25 // #251
            .heatCapacity = 2280.0 // #253
            .haze = 1.0 // #258
            .transmissivityAir = 0.0 // #259
            .state = 0.0 // #260
            .ventilation = indoors/ventilation[flux] // #261
            .Uair = shelter[Uair] // #262
            .UstateExponent = shelter[screenUstateExponent] // #263
            .UventilationSlope = shelter[screenUventilationSlope] // #264
            .groundArea = construction/geometry[groundArea] // #282
          }
          vg::ScreensAirTransmissivity airTransmissivity { //288
            .screenAirExponent = shelter[screenAirExponent] // #284
            .states = ../*[state] // #285
            .transmissivities = ../*[transmissivityAir] // #286
          }
        }
        Vent vent { //296
          .length = construction/geometry[length] // #290
          .width = 1 // #291
          .number = 1 // #292
          .transmissivity = 1.0 // #293
        }
      }
      vg::ShelterFace side1 { //377
        vg::ShelterFaceArea area { //306
          .roofArea = geometry[roofArea] // #298
          .sideWallsArea = geometry[sideWallsArea] // #299
          .endWallsArea = geometry[endWallsArea] // #300
          .gablesArea = geometry[gablesArea] // #301
          .groundArea = geometry[groundArea] // #302
        }
        vg::Cover cover { //328
          .swReflectivityTop = 0.3 // #307
          .swReflectivityBottom = 0.3 // #308
          .swTransmissivityTop = 0.6 // #309
          .swTransmissivityBottom = 0.6 // #310
          .lwReflectivityTop = 0.7 // #311
          .lwReflectivityBottom = 0.7 // #312
          .lwTransmissivityTop = 0.2 // #313
          .lwTransmissivityBottom = 0.2 // #314
          .Utop = 6.5 // #315
          .Ubottom = 6.5 // #316
          .area = ../area[value] // #317
          .heatCapacity = 8400.0 // #318
          .windSpeed = outdoors[windSpeed] // #323
          .haze = 1.0 // #324
          .UwindMinimum = 2.8 // #325
          .UwindSlope = 1.2 // #326
          .UwindExponent = 0.8 // #327
        }
        vg::Screens screens { //376
          ScreenWall layer1 { //370
            .swReflectivityTop = -5.55112e-17 // #329
            .swReflectivityBottom = 0.65 // #330
            .swTransmissivityTop = 0.33 // #331
            .swTransmissivityBottom = 0.33 // #332
            .lwReflectivityTop = -5.55112e-17 // #333
            .lwReflectivityBottom = -5.55112e-17 // #334
            .lwTransmissivityTop = 0.33 // #335
            .lwTransmissivityBottom = 0.33 // #336
            .Utop = 3.25 // #337
            .Ubottom = 3.25 // #338
            .heatCapacity = 2280.0 // #340
            .haze = 1.0 // #345
            .transmissivityAir = 0.0 // #346
            .state = 0.0 // #347
            .ventilation = indoors/ventilation[flux] // #348
            .Uair = shelter[Uair] // #349
            .UstateExponent = shelter[screenUstateExponent] // #350
            .UventilationSlope = shelter[screenUventilationSlope] // #351
            .faceArea = ../../area[value] // #369
          }
          vg::ScreensAirTransmissivity airTransmissivity { //375
            .screenAirExponent = shelter[screenAirExponent] // #371
            .states = ../*[state] // #372
            .transmissivities = ../*[transmissivityAir] // #373
          }
        }
      }
      vg::ShelterFace side2 { //457
        vg::ShelterFaceArea area { //386
          .roofArea = geometry[roofArea] // #378
          .sideWallsArea = geometry[sideWallsArea] // #379
          .endWallsArea = geometry[endWallsArea] // #380
          .gablesArea = geometry[gablesArea] // #381
          .groundArea = geometry[groundArea] // #382
        }
        vg::Cover cover { //408
          .swReflectivityTop = 0.3 // #387
          .swReflectivityBottom = 0.3 // #388
          .swTransmissivityTop = 0.6 // #389
          .swTransmissivityBottom = 0.6 // #390
          .lwReflectivityTop = 0.7 // #391
          .lwReflectivityBottom = 0.7 // #392
          .lwTransmissivityTop = 0.2 // #393
          .lwTransmissivityBottom = 0.2 // #394
          .Utop = 6.5 // #395
          .Ubottom = 6.5 // #396
          .area = ../area[value] // #397
          .heatCapacity = 8400.0 // #398
          .windSpeed = outdoors[windSpeed] // #403
          .haze = 1.0 // #404
          .UwindMinimum = 2.8 // #405
          .UwindSlope = 1.2 // #406
          .UwindExponent = 0.8 // #407
        }
        vg::Screens screens { //456
          ScreenWall layer1 { //450
            .swReflectivityTop = -5.55112e-17 // #409
            .swReflectivityBottom = 0.65 // #410
            .swTransmissivityTop = 0.33 // #411
            .swTransmissivityBottom = 0.33 // #412
            .lwReflectivityTop = -5.55112e-17 // #413
            .lwReflectivityBottom = -5.55112e-17 // #414
            .lwTransmissivityTop = 0.33 // #415
            .lwTransmissivityBottom = 0.33 // #416
            .Utop = 3.25 // #417
            .Ubottom = 3.25 // #418
            .heatCapacity = 2280.0 // #420
            .haze = 1.0 // #425
            .transmissivityAir = 0.0 // #426
            .state = 0.0 // #427
            .ventilation = indoors/ventilation[flux] // #428
            .Uair = shelter[Uair] // #429
            .UstateExponent = shelter[screenUstateExponent] // #430
            .UventilationSlope = shelter[screenUventilationSlope] // #431
            .faceArea = ../../area[value] // #449
          }
          vg::ScreensAirTransmissivity airTransmissivity { //455
            .screenAirExponent = shelter[screenAirExponent] // #451
            .states = ../*[state] // #452
            .transmissivities = ../*[transmissivityAir] // #453
          }
        }
      }
      vg::ShelterFace end1 { //495
        vg::ShelterFaceArea area { //466
          .roofArea = geometry[roofArea] // #458
          .sideWallsArea = geometry[sideWallsArea] // #459
          .endWallsArea = geometry[endWallsArea] // #460
          .gablesArea = geometry[gablesArea] // #461
          .groundArea = geometry[groundArea] // #462
        }
        vg::Cover cover { //488
          .swReflectivityTop = 0.3 // #467
          .swReflectivityBottom = 0.3 // #468
          .swTransmissivityTop = 0.6 // #469
          .swTransmissivityBottom = 0.6 // #470
          .lwReflectivityTop = 0.7 // #471
          .lwReflectivityBottom = 0.7 // #472
          .lwTransmissivityTop = 0.2 // #473
          .lwTransmissivityBottom = 0.2 // #474
          .Utop = 6.5 // #475
          .Ubottom = 6.5 // #476
          .area = ../area[value] // #477
          .heatCapacity = 8400.0 // #478
          .windSpeed = outdoors[windSpeed] // #483
          .haze = 1.0 // #484
          .UwindMinimum = 2.8 // #485
          .UwindSlope = 1.2 // #486
          .UwindExponent = 0.8 // #487
        }
        vg::Screens screens { //494
          vg::ScreensAirTransmissivity airTransmissivity { //493
            .screenAirExponent = shelter[screenAirExponent] // #489
            .states = ../*[state] // #490
            .transmissivities = ../*[transmissivityAir] // #491
          }
        }
      }
      vg::ShelterFace end2 { //533
        vg::ShelterFaceArea area { //504
          .roofArea = geometry[roofArea] // #496
          .sideWallsArea = geometry[sideWallsArea] // #497
          .endWallsArea = geometry[endWallsArea] // #498
          .gablesArea = geometry[gablesArea] // #499
          .groundArea = geometry[groundArea] // #500
        }
        vg::Cover cover { //526
          .swReflectivityTop = 0.3 // #505
          .swReflectivityBottom = 0.3 // #506
          .swTransmissivityTop = 0.6 // #507
          .swTransmissivityBottom = 0.6 // #508
          .lwReflectivityTop = 0.7 // #509
          .lwReflectivityBottom = 0.7 // #510
          .lwTransmissivityTop = 0.2 // #511
          .lwTransmissivityBottom = 0.2 // #512
          .Utop = 6.5 // #513
          .Ubottom = 6.5 // #514
          .area = ../area[value] // #515
          .heatCapacity = 8400.0 // #516
          .windSpeed = outdoors[windSpeed] // #521
          .haze = 1.0 // #522
          .UwindMinimum = 2.8 // #523
          .UwindSlope = 1.2 // #524
          .UwindExponent = 0.8 // #525
        }
        vg::Screens screens { //532
          vg::ScreensAirTransmissivity airTransmissivity { //531
            .screenAirExponent = shelter[screenAirExponent] // #527
            .states = ../*[state] // #528
            .transmissivities = ../*[transmissivityAir] // #529
          }
        }
      }
    }
    Box floor { //547
      &reflectivity = 0.6 // #543
      &Utop = 7.5 // #544
      &Ubottom = 0.1 // #545
      &heatCapacity = 42000.0 // #546
    }
  }
  Actuators actuators { //772
    ActuatorVentilation ventilation { //560
      .minFlux = setpoints/crackVentilation[value] // #549
      .windCoef = 50.0 // #550
      .temperatureCoef = 14.0 // #551
      .windSpeed = outdoors[windSpeed] // #552
      .outdoorsTemperature = outdoors[temperature] // #553
      .indoorsTemperature = sensor[indoorsTemperature] // #554
      .effectiveVentArea = sum(shelter/*/vent[effectiveArea]) // #555
      .groundArea = construction/geometry[groundArea] // #556
    }
    Box co2Injection { //562
      &value = 0.0 // #561
    }
    ActuatorHeatPipes heating { //602
      .propConvection = 0.5 // #593
      .minTemperatures = ./pipes/*[minTemperature] // #594
      .maxTemperatures = ./pipes/*[maxTemperature] // #595
      .energyFluxes = ./pipes/*[energyFlux] // #596
      Box pipes { //591
        vg::PipeForced pipe { //576
          .Tair = sensor[indoorsTemperature] // #563
          .innerDiameter = 23.0 // #564
          .waterVolume = 1.24643 // #565
          .flowRate = 30.0 // #566
          .minTemperature = 0.0 // #567
          .maxTemperature = 100.0 // #568
          .Tinflow = 45.4013 // #569
          .k = 0.0008 // #570
          .b = 1.1563 // #571
          .knownToutflow = -999.0 // #572
        }
        vg::PipeForced pipe { //590
          .Tair = sensor[indoorsTemperature] // #577
          .innerDiameter = 23.0 // #578
          .waterVolume = 1.24643 // #579
          .flowRate = 30.0 // #580
          .minTemperature = 0.0 // #581
          .maxTemperature = 100.0 // #582
          .Tinflow = 0.0 // #583
          .k = 0.0008 // #584
          .b = 1.1563 // #585
          .knownToutflow = -999.0 // #586
        }
      }
    }
    vg::GrowthLights growthLights { //771
      .swTransmissivityTop = 1.0 // #719
      .swTransmissivityBottom = 1.0 // #720
      .lwTransmissivityTop = 1.0 // #723
      .lwTransmissivityBottom = 1.0 // #724
      .Utop = inf // #725
      .Ubottom = inf // #726
      .area = construction/geometry[groundArea] // #727
      .maxTemperatureRateOfChange = 100.0 // #740
      .timeStep = calendar[timeStepSecs] // #741
      .lightsCurrentlyOn = ./Box::*[currentlyOn] // #763
      .lightsParEmittedDown = ./Box::*[parEmittedDown] // #764
      .lightsSwEmittedDown = ./Box::*[swEmittedDown] // #765
      .lightsLwFluxDown = ./Box::*[lwFluxDown] // #766
      .lightsLwFluxUp = ./Box::*[lwFluxDown] // #767
      .lightsPowerUsage = ./Box::*[powerUsage] // #768
      GrowthLight noLight { //659
        .swTransmissivityTop = 1.0 // #605
        .swTransmissivityBottom = 1.0 // #606
        .lwTransmissivityTop = 1.0 // #609
        .lwTransmissivityBottom = 1.0 // #610
        .Utop = inf // #611
        .Ubottom = inf // #612
        .area = construction/geometry[groundArea] // #613
        .maxTemperatureRateOfChange = 100.0 // #626
        .timeStep = calendar[timeStepSecs] // #627
        .parPhotonCoef = 1.6 // #652
        .propLw = 0.1 // #653
        .ageCorrectedEfficiency = 1.0 // #654
      }
      vg::GrowthLight growthLight { //716
        .swTransmissivityTop = 1.0 // #662
        .swTransmissivityBottom = 1.0 // #663
        .lwTransmissivityTop = 1.0 // #666
        .lwTransmissivityBottom = 1.0 // #667
        .Utop = inf // #668
        .Ubottom = inf // #669
        .area = construction/geometry[groundArea] // #670
        .maxTemperatureRateOfChange = 100.0 // #683
        .timeStep = calendar[timeStepSecs] // #684
        .on = TRUE // #706
        .ballast = 2.2924 // #707
        .intensity = 65.4971 // #708
        .parPhotonCoef = 1.787 // #709
        .propLw = 0.5 // #710
        .ageCorrectedEfficiency = 1.0 // #711
      }
    }
  }
  vg::EnergyBudget energyBudget { //1150
    .greenhouseVolume = construction/geometry[volume] // #1132
    .roomTemperature = indoors/temperature[value] // #1133
    .pipeEnergyFluxConvection = actuators/heating[energyFluxConvection] // #1134
    .cropCoverage = crop[coverage] // #1135
    .withCrop = TRUE // #1136
    .keepConstantScreenTemperature = FALSE // #1137
    .outdoorsTemperature = outdoors[temperature] // #1138
    .soilTemperature = outdoors[soilTemperature] // #1139
    .timeStep = calendar[timeStepSecs] // #1140
    .precision = 0.001 // #1141
    .step = /.[step] // #1142
    vg::HeatTransferSky sky { //822
      .swTransmissivityTop = 0.0 // #775
      .swTransmissivityBottom = 0.0 // #776
      .lwTransmissivityTop = 0.0 // #779
      .lwTransmissivityBottom = 0.0 // #780
      .Utop = inf // #781
      .Ubottom = inf // #782
      .area = construction/geometry[coverArea] // #783
      .maxTemperatureRateOfChange = 100.0 // #796
      .timeStep = calendar[timeStepSecs] // #797
      .irradiation = outdoors[radiation] // #819
      .propPar = outdoors[propPar] // #820
      .propUv = outdoors[propUv] // #821
    }
    vg::HeatTransferCover cover { //891
      .swTransmissivityTop = 1.0 // #825
      .swTransmissivityBottom = 1.0 // #826
      .lwTransmissivityTop = 1.0 // #829
      .lwTransmissivityBottom = 1.0 // #830
      .Utop = inf // #831
      .Ubottom = inf // #832
      .condensationRate = waterBudget/condensationCover[vapourFlux] // #845
      .maxTemperatureRateOfChange = 100.0 // #846
      .timeStep = calendar[timeStepSecs] // #847
      .swReflectivityTopShelter = shelter/*/cover[swReflectivityTop] // #869
      .swReflectivityBottomShelter = shelter/*/cover[swReflectivityBottom] // #870
      .swTransmissivityTopShelter = shelter/*/cover[swTransmissivityTop] // #871
      .swTransmissivityBottomShelter = shelter/*/cover[swTransmissivityBottom] // #872
      .swAbsorptivityTopShelter = shelter/*/cover[swAbsorptivityTop] // #873
      .swAbsorptivityBottomShelter = shelter/*/cover[swAbsorptivityBottom] // #874
      .lwReflectivityTopShelter = shelter/*/cover[lwReflectivityTop] // #875
      .lwReflectivityBottomShelter = shelter/*/cover[lwReflectivityBottom] // #876
      .lwTransmissivityTopShelter = shelter/*/cover[lwTransmissivityTop] // #877
      .lwTransmissivityBottomShelter = shelter/*/cover[lwTransmissivityBottom] // #878
      .lwAbsorptivityTopShelter = shelter/*/cover[lwAbsorptivityTop] // #879
      .lwAbsorptivityBottomShelter = shelter/*/cover[lwAbsorptivityBottom] // #880
      .UtopShelter = shelter/*/cover[Utop] // #881
      .UbottomShelter = shelter/*/cover[Ubottom] // #882
      .areaShelter = shelter/*/cover[area] // #883
      .heatCapacityShelter = shelter/*/cover[heatCapacity] // #884
      .groundArea = geometry[groundArea] // #885
      .coverPerGroundArea = construction/geometry[coverPerGroundArea] // #886
      .indoorsTemperature = indoors/temperature[value] // #887
      .skyTemperature = outdoors[skyTemperature] // #889
      .outdoorsTemperature = outdoors[temperature] // #890
    }
    vg::HeatTransferScreen1 screen1 { //959
      .swTransmissivityTop = 1.0 // #894
      .swTransmissivityBottom = 1.0 // #895
      .lwTransmissivityTop = 1.0 // #898
      .lwTransmissivityBottom = 1.0 // #899
      .Utop = inf // #900
      .Ubottom = inf // #901
      .condensationRate = waterBudget/condensationScreens/screen1[vapourFlux] // #914
      .maxTemperatureRateOfChange = 0.25 // #915
      .timeStep = calendar[timeStepSecs] // #916
      .swReflectivityTopShelter = shelter/*/screens/layer1[swReflectivityTopNet] // #938
      .swReflectivityBottomShelter = shelter/*/screens/layer1[swReflectivityBottomNet] // #939
      .swTransmissivityTopShelter = shelter/*/screens/layer1[swTransmissivityTopNet] // #940
      .swTransmissivityBottomShelter = shelter/*/screens/layer1[swTransmissivityBottomNet] // #941
      .swAbsorptivityTopShelter = shelter/*/screens/layer1[swAbsorptivityTopNet] // #942
      .swAbsorptivityBottomShelter = shelter/*/screens/layer1[swAbsorptivityBottomNet] // #943
      .lwReflectivityTopShelter = shelter/*/screens/layer1[lwReflectivityTopNet] // #944
      .lwReflectivityBottomShelter = shelter/*/screens/layer1[lwReflectivityBottomNet] // #945
      .lwTransmissivityTopShelter = shelter/*/screens/layer1[lwTransmissivityTopNet] // #946
      .lwTransmissivityBottomShelter = shelter/*/screens/layer1[lwTransmissivityBottomNet] // #947
      .lwAbsorptivityTopShelter = shelter/*/screens/layer1[lwAbsorptivityTopNet] // #948
      .lwAbsorptivityBottomShelter = shelter/*/screens/layer1[lwAbsorptivityBottomNet] // #949
      .UtopShelter = shelter/*/screens/layer1[UtopNet] // #950
      .UbottomShelter = shelter/*/screens/layer1[UbottomNet] // #951
      .areaShelter = shelter/*/screens/layer1[area] // #952
      .heatCapacityShelter = shelter/*/screens/layer1[heatCapacity] // #953
      .groundArea = geometry[groundArea] // #954
      .coverPerGroundArea = construction/geometry[coverPerGroundArea] // #955
      .indoorsTemperature = indoors/temperature[value] // #956
      .coverArea = geometry[coverArea] // #958
    }
    vg::HeatTransferPipe pipe { //1007
      .swTransmissivityTop = 1.0 // #962
      .swTransmissivityBottom = 1.0 // #963
      .lwTransmissivityTop = 1.0 // #966
      .lwTransmissivityBottom = 1.0 // #967
      .Utop = inf // #968
      .Ubottom = inf // #969
      .area = construction/geometry[groundArea] // #970
      .maxTemperatureRateOfChange = 100.0 // #983
      .timeStep = calendar[timeStepSecs] // #984
      .energyFluxRadiation = actuators/heating[energyFluxRadiation] // #1006
    }
    vg::HeatTransferCrop crop { //1060
      .swTransmissivityTop = 1.0 // #1010
      .swTransmissivityBottom = 1.0 // #1011
      .lwTransmissivityTop = 1.0 // #1014
      .lwTransmissivityBottom = 1.0 // #1015
      .Utop = inf // #1016
      .Ubottom = inf // #1017
      .area = construction/geometry[groundArea] // #1018
      .maxTemperatureRateOfChange = 100.0 // #1031
      .timeStep = calendar[timeStepSecs] // #1032
      .lai = /crop[lai] // #1054
      .swK = crop[k] // #1055
      .swScatteringCoef = 0.2 // #1056
      .lwK = 0.8 // #1057
      .lwScatteringCoef = 0.05 // #1058
      .leafTemperature = crop/temperature[value] // #1059
    }
    vg::HeatTransferFloor floor { //1107
      .swReflectivityTop = construction/floor[reflectivity] // #1061
      .swReflectivityBottom = construction/floor[reflectivity] // #1062
      .swTransmissivityTop = 0.0 // #1063
      .swTransmissivityBottom = 0.0 // #1064
      .lwReflectivityTop = construction/floor[reflectivity] // #1065
      .lwReflectivityBottom = construction/floor[reflectivity] // #1066
      .lwTransmissivityTop = 0.0 // #1067
      .lwTransmissivityBottom = 0.0 // #1068
      .Utop = construction/floor[Utop] // #1069
      .Ubottom = construction/floor[Ubottom] // #1070
      .area = construction/geometry[groundArea] // #1071
      .heatCapacity = construction/floor[heatCapacity] // #1072
      .maxTemperatureRateOfChange = 100.0 // #1084
      .timeStep = calendar[timeStepSecs] // #1085
    }
    Box indoors { //1131
      vg::IndoorsVentilation ventilation { //1118
        .fluxLeakageAlone = ./leakage[flux] // #1112
        .fluxVentilationAlone = actuators/ventilation[flux] // #1113
        .screensAirTransmissivity = shelter[screensAirTransmissivity] // #1114
        vg::LeakageVentilation leakage { //1111
          .leakage = 0.1 // #1108
          .windSpeed = outdoors[windSpeed] // #1109
        }
      }
      vg::IndoorsTemperature temperature { //1130
        .initTemperature = 25.5008 // #1119
        .timeStep = calendar[timeStepSecs] // #1121
        .groundArea = geometry[groundArea] // #1122
        .volume = geometry[volume] // #1123
        .airInflux = indoors/ventilation[flux] // #1124
        .outdoorsTemperature = outdoors[temperature] // #1125
        .keepConstant = TRUE // #1126
        .scanTemperatures = TRUE // #1127
      }
    }
  }
  vg::WaterBudget waterBudget { //1204
    .conductance = ./*[conductance] // #1198
    .vapourFlux = ./*[vapourFlux] // #1199
    .gain = ./*[gain] // #1200
    vg::VapourFluxVentilation ventilation { //1159
      .timeStep = calendar[timeStepSecs] // #1154
      .airInflux = indoors/ventilation[flux] // #1155
      .averageHeight = geometry[averageHeight] // #1156
      .indoorsAh = indoors/humidity[ah] // #1157
      .outdoorsAh = outdoors[ah] // #1158
    }
    vg::VapourFluxTranspiration transpiration { //1163
    }
    vg::VapourFluxCondensationCover condensationCrop { //1172
      .coverPerGroundArea = geometry[coverPerGroundArea] // #1167
      .coverTemperature = energyBudget/cover[temperature] // #1168
      .indoorsTemperature = indoors/temperature[value] // #1169
      .indoorsAh = indoors/humidity[ah] // #1170
    }
    vg::VapourFluxCondensationCover condensationCover { //1181
      .coverPerGroundArea = geometry[coverPerGroundArea] // #1176
      .coverTemperature = energyBudget/cover[temperature] // #1177
      .indoorsTemperature = indoors/temperature[value] // #1178
      .indoorsAh = indoors/humidity[ah] // #1179
    }
    vg::VapourFluxCondensationScreens condensationScreens { //1197
      .conductances = ./*[conductance] // #1194
      .vapourFluxes = ./*[vapourFlux] // #1195
      .gains = ./*[gain] // #1196
      VapourFluxCondensationScreen1 screen1 { //1190
        .groundArea = geometry[groundArea] // #1185
        .screenAreas = shelter/*/screens/layer1[area] // #1186
        .screenTemperature = energyBudget/screen1[temperature] // #1187
        .indoorsTemperature = indoors/temperature[value] // #1188
        .indoorsAh = indoors/humidity[ah] // #1189
      }
    }
  }
  vg::Indoors indoors { //1238
    ThresholdSignal co2 { //1217
      .initialSignal = 2000.0 // #1205
      .initialFlag = FALSE // #1206
      .input = greenhouse[step] // #1212
      .threshold = 49.5 // #1213
      .flagAbove = TRUE // #1214
      .signalFlagged = 375.368 // #1215
      .signalUnflagged = 2000.0 // #1216
    }
    vg::IndoorsHumidity humidity { //1232
      .initRh = 64.5042 // #1218
      .conductance = waterBudget[conductanceSum] // #1219
      .vapourFlux = waterBudget[vapourFluxSum] // #1220
      .gain = waterBudget[gainSum] // #1221
      .temperature = indoors/temperature[value] // #1222
      .height = geometry[averageHeight] // #1223
      .timeStep = calendar[timeStepSecs] // #1224
      .keepConstant = TRUE // #1225
    }
    vg::IndoorsWindSpeed windSpeed { //1237
      .ventilation = indoors/ventilation[flux] // #1233
      .averageHeight = geometry[averageHeight] // #1234
      .minimumValue = 0.1 // #1235
    }
  }
  vg::Crop crop { //1484
    .lai = 1.0 // #1473
    .coverage = 0.9 // #1474
    .k = 0.7 // #1475
    .gammaStar = 55.47 // #1476
    .Jmax = 146.52 // #1477
    .lightRespiration = 0.74 // #1478
    .ballBerryIntercept = 0.1 // #1479
    .ballBerrySlope = 1.64 // #1480
    .Vcmax = 71.61 // #1481
    .alpha = 0.9125 // #1482
    .trackPn = TRUE // #1483
    vg::LeafWindSpeed leafWindSpeed { //1242
      .indoorsWindSpeedMinimum = 0.025 // #1239
      .indoorsWindSpeed = indoors/windSpeed[value] // #1240
    }
    vg::BoundaryLayerResistanceStanghellini boundaryLayerResistance { //1249
      .leafDimension = 0.025 // #1243
      .leafWindSpeed = ../leafWindSpeed[value] // #1244
      .leafTemperature = ../temperature[value] // #1247
      .indoorsTemperature = indoors/temperature[value] // #1248
    }
    vg::LeafTranspiration transpiration { //1261
      .lai = ..[lai] // #1253
      .cropCoverage = crop[coverage] // #1254
      .indoorsAh = indoors/humidity[ah] // #1255
      .radiationAbsorbed = energyBudget/crop[absorbed] // #1256
      .leafTemperature = ../temperature[value] // #1257
      .rsH2O = mean(../photosynthesis/*/stomatalResistance[rH2O]) // #1258
      .rbH2O = ../boundaryLayerResistance[rH2O] // #1259
    }
    vg::LeafTemperature temperature { //1269
      .indoorsTemperature = indoors/temperature[value] // #1262
      .indoorsRh = indoors/humidity[rh] // #1263
      .rsH2O = mean(../photosynthesis/*/stomatalResistance[rH2O]) // #1264
      .rbH2O = ../boundaryLayerResistance[rH2O] // #1265
      .radiationAbsorbed = energyBudget/crop[absorbed] // #1266
      .lai = /crop[lai] // #1267
    }
    vg::CanopyPhotosynthesis photosynthesis { //1417
      .lai = /crop[lai] // #1405
      .leafAn = ./*/leafPhotosynthesis[An] // #1406
      .leafAg = ./*/leafPhotosynthesis[Ag] // #1407
      .growthRespiration = 0.3 // #1408
      .trackPn = ..[trackPn] // #1409
      Box top { //1314
        IntercellularCo2 intercellularCo2 { //1276
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2] // #1270
          .stomatalResistance = ../stomatalResistance[rCo2] // #1271
          .indoorsCo2 = indoors/co2[value] // #1272
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1273
        }
        LeafParAbsorbed parAbsorbed { //1281
          .parFlux = energyBudget[cropParFluxFromAbove] // #1277
          .k = /crop[k] // #1278
          .lai = /crop[lai] // #1279
        }
        LeafRespiration respiration { //1288
          .leafTemperature = crop/temperature[value] // #1282
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed] // #1283
          .RL = crop[lightRespiration] // #1284
          .darknessThreshold = 5.0 // #1285
          .Q10 = 1.92 // #1286
        }
        LeafPhotosynthesisAj Aj { //1299
          .gammaStar = crop[gammaStar] // #1289
          .Jmax = crop[Jmax] // #1290
          .k = crop[k] // #1291
          .leafTemperature = crop/temperature[value] // #1292
          .intercellularCo2 = ../intercellularCo2[value] // #1293
          .parAbsorbed = ../parAbsorbed[value] // #1294
          .respiration = ../respiration[value] // #1295
        }
        StomatalResistanceBallBerry stomatalResistance { //1307
          .g0 = crop[ballBerryIntercept] // #1302
          .g1 = crop[ballBerrySlope] // #1303
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1304
          .rh = indoors/humidity[rh] // #1305
          .ca = indoors/co2[value] // #1306
        }
        LeafPhotosynthesis leafPhotosynthesis { //1313
          .leafAj = ../Aj[value] // #1308
          .leafAr = ../respiration[value] // #1309
        }
      }
      Box mid { //1359
        IntercellularCo2 intercellularCo2 { //1321
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2] // #1315
          .stomatalResistance = ../stomatalResistance[rCo2] // #1316
          .indoorsCo2 = indoors/co2[value] // #1317
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1318
        }
        LeafParAbsorbed parAbsorbed { //1326
          .parFlux = energyBudget[cropParFluxFromAbove] // #1322
          .k = /crop[k] // #1323
          .lai = /crop[lai] // #1324
        }
        LeafRespiration respiration { //1333
          .leafTemperature = crop/temperature[value] // #1327
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed] // #1328
          .RL = crop[lightRespiration] // #1329
          .darknessThreshold = 5.0 // #1330
          .Q10 = 1.92 // #1331
        }
        LeafPhotosynthesisAj Aj { //1344
          .gammaStar = crop[gammaStar] // #1334
          .Jmax = crop[Jmax] // #1335
          .k = crop[k] // #1336
          .leafTemperature = crop/temperature[value] // #1337
          .intercellularCo2 = ../intercellularCo2[value] // #1338
          .parAbsorbed = ../parAbsorbed[value] // #1339
          .respiration = ../respiration[value] // #1340
        }
        StomatalResistanceBallBerry stomatalResistance { //1352
          .g0 = crop[ballBerryIntercept] // #1347
          .g1 = crop[ballBerrySlope] // #1348
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1349
          .rh = indoors/humidity[rh] // #1350
          .ca = indoors/co2[value] // #1351
        }
        LeafPhotosynthesis leafPhotosynthesis { //1358
          .leafAj = ../Aj[value] // #1353
          .leafAr = ../respiration[value] // #1354
        }
      }
      Box bottom { //1404
        IntercellularCo2 intercellularCo2 { //1366
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2] // #1360
          .stomatalResistance = ../stomatalResistance[rCo2] // #1361
          .indoorsCo2 = indoors/co2[value] // #1362
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1363
        }
        LeafParAbsorbed parAbsorbed { //1371
          .parFlux = energyBudget[cropParFluxFromAbove] // #1367
          .k = /crop[k] // #1368
          .lai = /crop[lai] // #1369
        }
        LeafRespiration respiration { //1378
          .leafTemperature = crop/temperature[value] // #1372
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed] // #1373
          .RL = crop[lightRespiration] // #1374
          .darknessThreshold = 5.0 // #1375
          .Q10 = 1.92 // #1376
        }
        LeafPhotosynthesisAj Aj { //1389
          .gammaStar = crop[gammaStar] // #1379
          .Jmax = crop[Jmax] // #1380
          .k = crop[k] // #1381
          .leafTemperature = crop/temperature[value] // #1382
          .intercellularCo2 = ../intercellularCo2[value] // #1383
          .parAbsorbed = ../parAbsorbed[value] // #1384
          .respiration = ../respiration[value] // #1385
        }
        StomatalResistanceBallBerry stomatalResistance { //1397
          .g0 = crop[ballBerryIntercept] // #1392
          .g1 = crop[ballBerrySlope] // #1393
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1394
          .rh = indoors/humidity[rh] // #1395
          .ca = indoors/co2[value] // #1396
        }
        LeafPhotosynthesis leafPhotosynthesis { //1403
          .leafAj = ../Aj[value] // #1398
          .leafAr = ../respiration[value] // #1399
        }
      }
    }
    vg::BigLeafPhotosynthesis bigLeaf { //1472
      .leafAn = ./leaf/leafPhotosynthesis[An] // #1463
      .leafAg = ./leaf/leafPhotosynthesis[Ag] // #1464
      .growthRespiration = 0.3 // #1465
      Box leaf { //1462
        IntercellularCo2 intercellularCo2 { //1424
          .boundaryLayerResistance = crop/boundaryLayerResistance[rCo2] // #1418
          .stomatalResistance = ../stomatalResistance[rCo2] // #1419
          .indoorsCo2 = indoors/co2[value] // #1420
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1421
        }
        LeafParAbsorbed parAbsorbed { //1429
          .parFlux = energyBudget[cropParFluxFromAbove] // #1425
          .k = /crop[k] // #1426
          .lai = /crop[lai] // #1427
        }
        LeafRespiration respiration { //1436
          .leafTemperature = crop/temperature[value] // #1430
          .canopyParAbsorbed = energyBudget/crop[parAbsorbed] // #1431
          .RL = crop[lightRespiration] // #1432
          .darknessThreshold = 5.0 // #1433
          .Q10 = 1.92 // #1434
        }
        LeafPhotosynthesisAj Aj { //1447
          .gammaStar = crop[gammaStar] // #1437
          .Jmax = crop[Jmax] // #1438
          .k = crop[k] // #1439
          .leafTemperature = crop/temperature[value] // #1440
          .intercellularCo2 = ../intercellularCo2[value] // #1441
          .parAbsorbed = ../parAbsorbed[value] // #1442
          .respiration = ../respiration[value] // #1443
        }
        StomatalResistanceBallBerry stomatalResistance { //1455
          .g0 = crop[ballBerryIntercept] // #1450
          .g1 = crop[ballBerrySlope] // #1451
          .leafPhotosynthesis = ../leafPhotosynthesis[An] // #1452
          .rh = indoors/humidity[rh] // #1453
          .ca = indoors/co2[value] // #1454
        }
        LeafPhotosynthesis leafPhotosynthesis { //1461
          .leafAj = ../Aj[value] // #1456
          .leafAr = ../respiration[value] // #1457
        }
      }
    }
  }
  vg::ParBudget parBudget { //1493
    .sunPar = sky[parFluxDown] // #1485
    .growthLightsPar = growthLights[parEmittedDown] // #1486
    .indoorsTotalPar = energyBudget[cropParFluxFromAbove] // #1487
    .Pn = crop/photosynthesis[Pn] // #1488
    .cropCoverage = crop[coverage] // #1489
  }
}
