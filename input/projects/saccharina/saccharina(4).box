#using saccharina
Simulation sim {
  // .steps = 1
  Proportions proportions {
    .concStructureC = 0.21
    .concStructureN = 0.02
    .concStoreC     = 0.47
    .concStoreN     = 0.37
    .concStoreP     = 0.33
    .concWholeCmax  = 0.35
    .concWholeNmax  = 0.05
    .concWholePmax  = 0.009
  }
  Box init {
    // Total plant biomass (g dw/m)
    &biomass   = 1.5 
    // Assume initial ideal proportions
    &structure = proportions[idealStructure]
    &storeC    = proportions[idealStoreC]
    &storeN    = proportions[idealStoreN]
    &storeP    = proportions[idealStoreP]
  }
  Calendar calendar {
    .begin = 17/12/2019 - 1
    .end   = 03/06/2020
  }
  Records env {
    .fileName = "data/env-2019.txt"

  }
  Box biomass {
    PlantCompartment structure {
      .concC = proportions[concStructureC]
      .concN = proportions[concStructureN]
      .dwInit = init[biomass]*init[structure]
      .dwIncrement = allocation[supplyStructure]
    }
    PlantCompartment storeC {
      .concC = proportions[concStoreC]
      .dwInit = init[biomass]*init[storeC]
      .dwIncrement = allocation[supplyStoreC]
    }
    PlantCompartment storeN {
      .concN = proportions[concStoreN]
      .dwInit = init[biomass]*init[storeN]
      .dwIncrement = allocation[supplyStoreN]
    }
    PlantCompartment storeP {
      .concP = proportions[concStoreP]
      .dwInit = init[biomass]*init[storeP]
      .dwIncrement = allocation[supplyStoreP]
    }
    Plant whole {
    }
  }
  Area area {
    .ca = 0.3
    .cz = 0.3
    .ea = 0.667
    .biomass = biomass/structure[dw]
  }
  Box demand {
    DemandStructure structure {
      .g = 0.045
      .concC   = biomass/structure[concC]
      .concN   = biomass/structure[concN]
      .biomass = biomass/structure[dw]
      .phiT    = ./phiT[value]
      .phiSal  = ./phiSal[value]
      ScalingTemperature phiT {
        .T = env[T]
      }
      ScalingSalinity phiSal {
        .S = env[S]
      }
    }
    DemandStore storeC {
      .element       = "C"
      .concentration = proportions[concStoreC] 
      .idealStore    = proportions[idealStoreC] 
      .dwStore       = biomass/storeC[dw]
      .dwWhole       = biomass/whole[dw]
    }
    DemandStore storeN {
      .element       = "N"
      .concentration = proportions[concStoreN] 
      .idealStore    = proportions[idealStoreN] 
      .dwStore       = biomass/storeN[dw]
      .dwWhole       = biomass/whole[dw]
    }
    DemandStore storeP {
      .element       = "P"
      .concentration = proportions[concStoreP] 
      .idealStore    = proportions[idealStoreP] 
      .dwStore       = biomass/storeP[dw]
      .dwWhole       = biomass/whole[dw]
    }
    DemandMaintenance maintenance {
      .biomass = biomass/whole[dw]
      .T = env[T]
    }
    DemandExudation exudation {
      .biomass = biomass/whole[dw]
      .eC = 0.01
      .eN = 0.01
      .eP = 0.01
    }
    DemandBuilding cost {
      .lambdaS = 0.120
      .lambdaC = 0.056
      .lambdaN = 0.164
      .demandStructure = ../structure[dw]
      .demandStoreC    = ../storeC[dw]
      .demandStoreN    = ../storeN[dw]
    }
  }
  Box demandTotal {
    &C  = sum(demand/*[C])
    &N  = sum(demand/*[N])
    &P  = sum(demand/*[P])
  }
  Box supply {
    SupplyCarbon carbon {
      .alpha = 2.69
      .k     = 0.7
      .phiN = ./scalingNitrogen[value]
      .lai  = area[index]
      .czArea = area[crownZone]
      .Id = env[E0]
      .demand = demandTotal[C]
      ScalingNitrogen scalingNitrogen {
        .concN = biomass/whole[concN]
        .concNmin = 0.005
        .concNopt = 0.020
      }
    }
    SupplyNitrogen nitrogen {
      .beta  = 0.00005
      .area = area[leaf]
      .waterN = env[N]
      .demand = demandTotal[N]
    }
    SupplyPhosphorus phosphorus {
      .gamma = 0.4
      .area = area[leaf]
      .waterP = env[P]
      .demand = demandTotal[P]
    }
  }
  Allocation allocation {
    .UC = supply/carbon[value]
    .UN = supply/nitrogen[value]
    .UP = supply/phosphorus[value]
    .CC = biomass/storeC[C]
    .NN = biomass/storeN[N]
    .PP = biomass/storeP[P]
    .DMC = demand/maintenance[C]
    .DEC = demand/exudation[C]
    .DEN = demand/exudation[N]
    .DEP = demand/exudation[P]
    .DSC = demand/structure[C]
    .DSN = demand/structure[N]
    .DCC = demand/storeC[C]
    .DNN = demand/storeN[N]
    .DPP = demand/storeP[P]
  }
  Calibration calibration {
    .obsFileName = "data/obs-calibration-2019.txt"
  }
  OutputR {
    .scripts = "saccharina.R"
    OutputText {
      .ports = calendar[date] | biomass/*[dw] | biomass/whole[concC] | biomass/whole[concN] | biomass/whole[concP] |
               *[sdRatio] | supply/carbon[propIabsorbed] |
               // phiT[value] | phiSal[value] | scalingNitrogen[value] | scalingPhosphorus[value] | 
               env[T] | env[E0] | env[N] | env[S] | env[P]
    }
  }
}