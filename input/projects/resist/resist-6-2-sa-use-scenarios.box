Simulation sim {
  .steps = 30
  .silent = TRUE
  .stopSteps|all = frequencies[thresholdPassed] | density[thresholdPassed]
  .useStopSteps = TRUE
  .stopIterations = sc[atEnd]
  .useStopIterations = TRUE
  
  Scenarios sc {
    .fileName = "scenarios.txt"
  }
  Box random {
    RandomUniform K {
      .restartAtReset = TRUE
      .minValue = 5000
      .maxValue = sc[K_maxValue]
      .drawAtReset = TRUE
      .drawAtUpdate = TRUE
    }
    RandomUniform coverage {
      .restartAtReset = TRUE
      .minValue = 0
      .maxValue = sc[coverage_maxValue]
      .drawAtReset = TRUE
      .drawAtUpdate = TRUE
    }
    Box immigration {
      RandomUniform proportion {
        .restartAtReset = TRUE
        .minValue = ./bounds[Pmin]
        .maxValue = ./bounds[Pmax]
        .drawAtReset = TRUE
        .drawAtUpdate = TRUE
        ProportionBounds bounds {
          .logP = sc[proportion_bounds_logP]
          .logWidth = 2
        }
      }
      RandomUniform q {
        .restartAtReset = TRUE
        .minValue = ./bounds[Pmin]
        .maxValue = ./bounds[Pmax]
        .drawAtReset = TRUE
        .drawAtUpdate = TRUE
        ProportionBounds bounds {
          .logP = sc[q_bounds_logP]
          .logWidth = 2
        }
      }
    }
  }
  Box pest {
    resist::Immigration immigration {
      .K = random/K[value]
      .proportion = random/immigration/proportion[value]
      .q = random/immigration/q[value]
    }
    SpraySurvival survival {
      .coverage = random/coverage[value]
      .maxMortality = sc[maxMortality]
      .slope = sc[slope]
      .resistanceGain = sc[resistanceGain]
    }
    Density density {
      .immigration = immigration[values]
      .reproduction = reproduction[values]
      .survival = survival[values]
      .densityThreshold = 30000
    }
    ReproductiveRate reproductiveRate {
      .R = sc[R]
      .fitnessPenalty = sc[fitnessPenalty]
      .Ntotal|sum = density[values]
      .K = random/K[value]
    }
    Reproduction reproduction {
      .N = density[values]
      .R = reproductiveRate[values]
    }
    GeneFrequencies frequencies {
      .N = density[values]
      .rThreshold = 0.5
    }
  }
  OutputR output {
    +myplot = "geom_point() + 
               stat_quantile(formula=y ~ bs(x), quantiles = 0.50, size=1, colour='brown') + 
               scale_y_continuous(trans='sqrt', breaks = c (0, 10, 25, 50, 100, 250, 500, 750, 1000))"
    PageR {
      .title = "Resistance threshold"
      .xAxis = sc[*]
      .ncol = 1
      PlotR {
        .ports = frequencies[thresholdGen]|end
        .ggplot = ../..[myplot]
      }
      PlotR {
        .ports = density[thresholdGen]|end
        .ggplot = ../..[myplot]
      }
    }
  }
}