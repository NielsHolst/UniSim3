// crop-aphid-fungus-model.box
Simulation sim {
  Box param {
    &k = 15
    &juvenileApterousDuration = 172
    &juvenileAlateDuration = 195 
    &adultDuration = 300
    &fecundityDuration = 100
    &fecundity_k = 1
    &lethalTime = 80
  }
  Calendar calendar {
    .begin = 01/04/2004
    .end   = 31/08/2004
  }
  Records weather {
    .fileName = "weather/Aarnes_2004.txt"
  } 
  Box wheat{
    CropGrowthStage cropGrowthStageModel {
      .valueAtStart       = 20.0
      .dayDegreesHalfways = 800.0
      .slope              = 2.8
      .dayDegrees = ./time[total]
      CropIsGrowing isGrowing {
        .temperature = weather[Tavg] 
      }
      DayDegrees time{
        .T = weather[Tavg]
        .T0 = 0
        .isTicking = ../isGrowing[value]
      }
    }
    Box cropGrowthStage {
      &value = if exists(weather[GrowthStage]) then weather[GrowthStage] else ../cropGrowthStageModel[value]
    }
  }
  Maker system {
    // The system contains two aphid populations, 
    // identical except for the proportion of exposed immigrants
    .names = c("withoutFungus", "withFungus")
    Box { // withoutFungus or withFungus
      DayDegrees time{
        .T = weather[Tavg]
        .T0 = 3 
        .Topt = 18 
        .Tmax = 30 
      }  
      DayDegrees fungusTime {
        .T = weather[Tavg]
        .T0 = 2 
        .Topt = 18 
        .Tmax = 30 
      }
      Box aphidDensity {
        &nymphs      = sum(../*/nymph/*[content])
        &adults      = sum(../*/adult/*[content])
        &total       = .[nymphs] + .[adults]
        &susceptible = sum(../susceptible/*/*[content])
        &exposed     = sum(../exposed/*/*[content])
        &cadavers    = sum(../infectious/cadavers[content])
      }
      AphidImmigration immigration {
        .cropGrowthStage = cropGrowthStage[value]
        .toCropGrowthStage = 69
        .immigrationRate = 0.02
        .propExposedImmigrants = if name(..[]) == "withFungus"
                                 then 0.25
                                 else 0.0
        .k = param[k]
      }
      AphidNetReproduction netReproduction {
        .Tmin = 3 
        .Topt = 16.1 
        .Tmax = 30
        .R0opt = 51.6
        .temperature = weather[Tavg]
        .cropGrowthStage = cropGrowthStage[value]
        .optimumCropGrowthStageMin = 59
        .optimumCropGrowthStageMax   = 73
        .optimumCropFactor = 1.6
        .aphidDensity = ../aphidDensity[total]
        .aphidDensityThreshold = 40 
        .alateFactor = 0.67
      }
      AphidOffspring offspring {
        .offspringTotal = sum(../*/adult/*/fecundity[outflow]) 
        .aphidDensity = ../aphidDensity[total]
        .cropGrowthStage = cropGrowthStage[value]
      }
      AphidJuvenileSurvival survival{
        .cropGrowthStage = cropGrowthStage[value]
        .temperature = weather[Tavg]
      }
      Box susceptible {
        Box nymph {
          Stage apterous {
            .inflow       = ancestors::*/offspring[apterous]
            .timeStep     = ancestors::*/time[step]
            .growthFactor = ancestors::*/survival[value]
            .k = param[k]
            .duration = param[juvenileApterousDuration]
            .phaseOutflowProportion = ancestors::*/infectious/infectionRate[value]
          }
          Stage alate {
            .inflow = ancestors::*/offspring[alate]
            .timeStep = ancestors::*/time[step]
            .k = param[k]
            .duration = param[juvenileAlateDuration]
            .growthFactor = ancestors::*/survival[value]
            .phaseOutflowProportion = ancestors::*/infectious/infectionRate[value]
          }
        }
        Box adult {
          Stage apterous {
            .inflow = ancestors::*/nymph/apterous[outflow]
            .timeStep = ancestors::*/time[step]
            .duration = param[adultDuration]
            .k = param[k]
            .phaseOutflowProportion = ancestors::*/infectious/infectionRate[value]
            Stage fecundity {
              .inflow = ancestors::*/nymph/apterous[outflow]
              .timeStep = ancestors::*/time[step]
              .duration = param[fecundityDuration]
              .k = param[fecundity_k]
              .growthFactor = ancestors::*/netReproduction[apterous]
              .phaseOutflowProportion = ancestors::*/infectious/infectionRate[value]
            }
          }
          Stage alate {
            .inflow = ancestors::*/immigration[susceptible]
            .timeStep = ancestors::*/time[step]
            .duration = param[adultDuration]
            .k = param[k]
            .phaseOutflowProportion = ancestors::*/infectious/infectionRate[value]
            Stage fecundity {
              .inflow = ancestors::*/immigration[susceptible]
              .timeStep = ancestors::*/time[step]
              .duration = param[fecundityDuration]
              .k = param[fecundity_k]
              .growthFactor = ancestors::*/netReproduction[alate]
              .phaseOutflowProportion = ancestors::*/infectious/infectionRate[value]
            }
          }
        }
      } // susceptible
      Box exposed {
        Box nymph {
          StageAndPhase apterous {
            .timeStep = ancestors::*/time[step]
            .k = param[k]
            .duration = param[juvenileApterousDuration]
            .growthFactor = ancestors::*/survival[value]
            .phaseInflow = ancestors::*/susceptible/nymph/apterous[phaseOutflow]
            .phaseTimeStep = ancestors::*/fungusTime[step]
            .phaseK = param[k]
            .phaseDuration = param[lethalTime]
          }
          StageAndPhase alate {
            .timeStep = ancestors::*/time[step]
            .k = param[k]
            .duration = param[juvenileAlateDuration]
            .growthFactor = ancestors::*/survival[value]
            .phaseInflow = ancestors::*/susceptible/nymph/alate[phaseOutflow]
            .phaseTimeStep = ancestors::*/fungusTime[step]
            .phaseK = param[k]
            .phaseDuration = param[lethalTime]
          }
        } // nymph
        Box adult {
          StageAndPhase apterous {
            .inflow = ancestors::*/nymph/apterous[outflow]
            .timeStep = ancestors::*/time[step]
            .duration = param[adultDuration]
            .k = param[k]
            .phaseInflow = ancestors::*/susceptible/adult/apterous[phaseOutflow]
            .phaseTimeStep = ancestors::*/fungusTime[step]
            .phaseK = param[k]
            .phaseDuration = param[lethalTime]
            StageAndPhase fecundity {
               // No inflow because exposed/nymphs don't reproduce as adults
              .timeStep = ancestors::*/time[step]
              .duration = param[fecundityDuration]
              .k = param[fecundity_k]
              .growthFactor = ancestors::*/netReproduction[apterousExposed] 
              .phaseInflow = ancestors::*/susceptible/adult/apterous/fecundity[phaseOutflow]
              .phaseTimeStep = ancestors::*/fungusTime[step]
              .phaseK = param[k]
              .phaseDuration = param[lethalTime]
            }
          }
          StageAndPhase alate {
            .inflow = ancestors::*/immigration[exposed]
            .timeStep = ancestors::*/time[step]
            .duration = param[adultDuration]
            .k = param[k]
            .phaseInflow = ancestors::*/susceptible/adult/alate[phaseOutflow]
            .phaseTimeStep = ancestors::*/fungusTime[step]
            .phaseK = param[k]
            .phaseDuration = param[lethalTime]
            StageAndPhase fecundity {
              // Exposed immigrants reproduce after arriving
              .inflow = ancestors::*/immigration[exposed]
              .timeStep = ancestors::*/time[step]
              .duration = param[fecundityDuration]
              .k = param[fecundity_k]
              .growthFactor = ancestors::*/netReproduction[alateExposed] 
              .phaseInflow = ancestors::*/susceptible/adult/alate/fecundity[phaseOutflow]
              .phaseTimeStep = ancestors::*/fungusTime[step]
              .phaseK = param[k]
              .phaseDuration = param[lethalTime]
            }
          }
        } // adult
        CadaverConversion succumbed {
          .succumbedApterousNymphs = sum(ancestors::*/nymph/apterous[phaseOutflow])
          .succumbedAlateNymphs    = sum(ancestors::*/nymph/alate[phaseOutflow])
          .succumbedApterousAdults = sum(ancestors::*/adult/apterous[phaseOutflow])
          .succumbedAlateAdults    = sum(ancestors::*/adult/alate[phaseOutflow])
        }
      } // exposed
      Box infectious {
        OnOff isSporulating {
          .x = weather[RHmax]
          .xOn = 95
          .xOff = 999 
        }
        CadaverTime time {
          .isSporulating = ../isSporulating[isOn]
          .timeStep = ancestors::*/fungusTime[step]
          .rhAccelaration = 2
        }
        Stage cadavers {
          .inflow = ancestors::*/exposed/succumbed[cadavers]
          .timeStep = ../time[step]
          .duration = 100
          .k = param[k]
        }
        InfectionRate infectionRate {
          .isSporulating = ../isSporulating[isOn]
          .cadavers = ../cadavers[content]
          .transmissionEfficiency = 0.2
        }
      } // infectious
      Box diagnostics {
        Accumulator aphidDays {
          .change = ancestors::*/aphidDensity[total]
        }
        Accumulator cadaverDays {
          .change = ../../infectious/cadavers[content]
        }
        Prevalence prevalence {
          .aphidDensity   = ancestors::*/aphidDensity[total]
          .exposedDensity = ancestors::*/aphidDensity[exposed]
          .cadaverDensity = ancestors::*/aphidDensity[cadavers]
        }
        AphidIndex aphidIndex {
          .nymphs = ancestors::*/aphidDensity[nymphs]
          .adults = ancestors::*/aphidDensity[adults]
        }
        aphid::Yield yield {
          .aphidIndex = ../aphidIndex[value]
          .cropGrowthStage = cropGrowthStage[value]
        }
      } // diagnostics
    } // withoutFungus or withFungus
  } // system
  OutputR {
    .width = 7
    .height = 7
    PageR {
      .xAxis = calendar[date]
      PlotR {
        .ports = system/*/*/*/Stage::*[value] | Stage::cadavers[value]
        .ncol = 2
        .direction = "col"
        .ggplot = "scale_colour_manual(values=c(rep(red,5), rep(blue,5)))"
      }
    }
    PageR {
      .xAxis = calendar[date]
      PlotR {
        .ports = diagnostics/aphidDays[value] | diagnostics/cadaverDays[value] | diagnostics/prevalence[output::*] | diagnostics/yield[yield]
        .ncol = 2
        .direction = "col"
        .ggplot = "scale_colour_manual(values=c(rep(red,5), rep(blue,5)))"
      }
    }
  }
}