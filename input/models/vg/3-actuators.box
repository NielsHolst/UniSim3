Simulation sim {
  Box global {
    &beginDate = 2022/08/01
  }
  Calendar calendar{
    .latitude  = 55.4
    .longitude = 10.4
    .begin = global[beginDate] - 1
    .end   = 2022/08/02
    .timeStep = 15
    .timeUnit = "m"
  }
  vg::Outdoors outdoors{
    Records records{
      .fileName = "DNK_Odense.txt"
      .cycle = TRUE
    }
    SkyTemperature skyTemperatureEstimate{
    }
    SoilTemperature soilTemperature{
      .initial = 1.2
    }
  }
  Box construction{
    vg::Geometry geometry{
      .numSpans = 25
      .spanWidth = 4
      .length = 100
      .height = 3.5
      .roofPitch = 26
    }
    Box shelter {
      UWind Utop {
      }
      Box covers {
        Cover glass {
          .swReflectivityTop      = 0.1
          .swTransmissivityTop    = 0.8
          .swReflectivityBottom   = 0.1
          .swTransmissivityBottom = 0.8
          .lwReflectivityTop      = 0.15
          .lwTransmissivityTop    = 0.20
          .lwReflectivityBottom   = 0.15
          .lwTransmissivityBottom = 0.20
          .Utop                   = ../../Utop[value]
          .Ubottom                = 1.2
          .heatCapacity           = 8400
          .swReflectivityChalk    = actuators/chalk[swReflectivity]
          .lwReflectivityChalk    = actuators/chalk[lwReflectivity]
        }
      }
      Box screens {
        Screen energy {
          .swReflectivityTop      = 0.93
          .swTransmissivityTop    = 0.0
          :
          .Utop                   = 1.2
          .Ubottom                = 1.2
          .heatCapacity           = 80
          .state = actuators/screens/energy[value]
        }
        Screen shade1 {
          .swReflectivityTop      = 0.70
          .swTransmissivityTop    = 0.20
          :
          .Utop                   = 1.2
          .Ubottom                = 1.2
          .heatCapacity           = 80.
          .state = actuators/screens/shade[value]
        }
        Screen shade2 {
          .swReflectivityTop      = 0.80
          .swTransmissivityTop    = 0.10
          :
          .Utop                   = 1.1
          .Ubottom                = 1.1
          .heatCapacity           = 120.
          .state = actuators/screens/shade[value]
        }
        Screen blackout {
          .swReflectivityTop      = 0.05
          .swTransmissivityTop    = 0.0
          :
          .Utop                   = 1.2
          .Ubottom                = 1.2
          .heatCapacity           = 200.
          .state = actuators/screens/blackout[value]
        }
      }
      Box faces {
        Box roof1 {
          &cover = "glass"
          &screens = "energy+shade1+blackout"
          &weight = 1
        }
        Box roof2 {
          &cover = "glass"
          &screens = "energy+shade1+blackout"
          &weight = 1
        }
        Box side1 {
          &cover = "glass"
          &screens = "none+shade2+blackout"
          &weight = 1
        }
        Box side2 {
          &cover = "glass"
          &screens = "none+none+blackout"
          &weight = 0.5
        }
        Box end1 {
          &cover = "glass"
          &screens = "none+none+blackout"
          &weight = 0.2
        }
        Box end2 {
          &cover = "glass"
          &screens = "energy+none+blackout"
          &weight = 0.2
        }
      }
    }
  } 
  Box setpoints {
    Box rhMax {
      PrioritySignal threshold {
        DateTimeSignal {
          .beginDate = 1/5
          .endDate = 31/8
          .signalInside = 80
        }
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 90
        }
      }
      PrioritySignal band {
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 5
        }
      }
    }
    Box heating {
      PrioritySignal base {
        DateTimeSignal {
          .beginDate = 1/4
          .endDate = 30/9
          .signalInside = 20
        }
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 22
        }
      }
      PrioritySignal humidityOffset {
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 2
        }
      }
    }
    Box ventilation {
      PrioritySignal baseOffset {
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 2
        }
      }
      PrioritySignal humidityOffset {
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = -1.5
        }
      }
    }
    Box ventilationCrack {
      PrioritySignal size {
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 0.5
        }
      }
      Box temperature {
        PrioritySignal threshold {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = -5
          }
        }
        PrioritySignal band {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 3
          }
        }
      }
      
    }
    Box screens {
      Box energy {
        PrioritySignal threshold {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 5
          }
        }
        PrioritySignal band {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 0
          }
        }
      }
      Box shade {
        PrioritySignal threshold {
          DateTimeSignal {
            .beginDate = 1/12
            .endDate = 31/1
            .signalInside = 300
          }
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 15/3
            .signalInside = 400
          }
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 500
          }
        }
        PrioritySignal band {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 50
          }
        }
      }
      Box blackout {
        PrioritySignal threshold {
          DateTimeSignal {
            .beginDate = 1/4
            .endDate = 15/6
            .beginTime = 04:00
            .endTime   = 12:00
            .signalInside = 2
            .signalOutside = 9999
          }
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 9999
          }
        }
        PrioritySignal band {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 0
          }
        }
      }
    }
    Box growthLights {
      Box bank1 {
        PrioritySignal mode {
          DateTimeSignal {
            .beginDate = 01/11
            .endDate   = 30/11
            .beginTime = 06:00:00
            .endTime   = 10:00:00
            .signalInside = 10
          }
          DateTimeSignal {
            .beginDate = 01/10
            .endDate   = 31/12
            .beginTime = 06:00:00
            .endTime   = 18:00:00
            .signalInside = 1
          }
          DateTimeSignal {
            .beginDate = 1/10
            .endDate   = 31/12
            .signalInside = 0
          }
        }
        Box thresholds {
          PrioritySignal low{
            DateTimeSignal {
              .beginDate = 1/1
              .endDate = 31/12
              .signalInside = 40
            }
          }
          PrioritySignal high{
            DateTimeSignal {
              .beginDate = 1/1
              .endDate = 31/12
              .signalInside = 600
            }
          }
        }
      }
      Box bank2 {
        PrioritySignal mode {
          DateTimeSignal {
            .beginDate =  1/10
            .endDate   = 31/01
            .beginTime = 04:00
            .endTime   = 08:00
            .signalInside = 10
          }
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 0
          }
        }
      }
    }
    PrioritySignal chalk {
      DateTimeSignal {
        .beginDate = 1/3
        .endDate = 15/4
        .signalInside = 1
      }
      DateTimeSignal {
        .beginDate = 1/1
        .endDate = 31/12
        .signalInside = 0
      }
    }
    Box co2 {
      PrioritySignal concentration {
        DateTimeSignal {
          .beginDate = 15/6
          .endDate = 31/08
          .signalInside = 1200
        }
        DateTimeSignal {
          .beginDate = 1/1
          .endDate = 31/12
          .signalInside = 900
        }
      }
      Box ventilation {
        PrioritySignal threshold {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 0.2
          }
        }
        PrioritySignal band {
          DateTimeSignal {
            .beginDate = 1/1
            .endDate = 31/12
            .signalInside = 0.1
          }
        }
      }
    }

  }
  Controllers controllers {
    Box crackVentilation {
      ProportionalSignal temperatureDependent {
        .input         = outdoors[temperature]
        .threshold     = setpoints/crackVentilation/temperature/threshold[value]
        .thresholdBand = setpoints/crackVentilation/temperature/band[value]
        .maxSignal     = setpoints/crackVentilation/base[value]
        .increasingSignal = TRUE
      }
      ProportionalSignal current {
        .input         = indoors[rh]
        .threshold     = setpoints/rhMax/threshold[value]
        .thresholdBand = setpoints/rhMax/band[value]
        .maxSignal     = ../temperatureDependent[value]
        .increasingSignal = TRUE
      }
    }
    Sum heating {
      .values = setpoints/heating/base[value] | 
                ./humidityOffset[value]
      ProportionalSignal humidityOffset {
        .input         = indoors[rh]
        .threshold     = setpoints/rhMax/threshold[value]
        .thresholdBand = setpoints/rhMax/band[value]
        .maxSignal     = setpoints/heating/humidityOffset[value]
        .increasingSignal = TRUE
      }
    }
    Sum ventilation {
      .values = controller/heating[value] | 
                setpoints/ventilation/baseOffset[value] | 
                ./humidityOffset[value]
      ProportionalSignal humidityOffset {
        .input         = indoors[rh]
        .threshold     = setpoints/rhMax/threshold[value]
        .thresholdBand = setpoints/rhMax/band[value]
        .maxSignal     = setpoints/ventilation/humidityOffset[value]
        .increasingSignal = TRUE
      }
    }
    ProportionalSignal ventilationCrack {
      .input         = indoors[rh]
      .threshold     = setpoints/rhMax/threshold[value]
      .thresholdBand = setpoints/rhMax/band[value]
      .maxSignal     = ./temperatureLimited[value]
      .increasingSignal = TRUE
      ProportionalSignal temperatureLimited {
        .input         = outdoors[temperature]
        .threshold     = setpoints/ventilationCrack/temperature/threshold[value]
        .thresholdBand = setpoints/ventilationCrack/temperature/band[value]
        .maxSignal     = setpoints/ventilationCrack/size[value]
        .increasingSignal = TRUE
      }
    }
    Box screens {
      ProportionalSignal energy {
        .input         = outdoors[radiation]
        .threshold     = setpoints/screens/energy/threshold[value]
        .thresholdBand = setpoints/screens/energy/band[value]
        .maxSignal = 1
        .increasingSignal = FALSE
      }
      ProportionalSignal shade {
        .input         = outdoors[radiation]
        .threshold     = setpoints/screens/shade/threshold[value]
        .thresholdBand = setpoints/screens/shade/band[value]
        .maxSignal = 1
        .increasingSignal = TRUE
      }
      ProportionalSignal blackout {
        .input         = outdoors[radiation]
        .threshold     = setpoints/screens/blackout/threshold[value]
        .thresholdBand = setpoints/screens/blackout/band[value]
        .maxSignal = 1
        .increasingSignal = TRUE
      }
    }
    Box growthLights {
      GrowthLightController bank1 {
        .mode          = setpoints/growthLights/bank1/mode[value]
        .input		 = outdoors[radiation]
        .thresholdLow  = setpoints/growthLights/bank1/thresholds/low[value]
        .thresholdHigh = setpoints/growthLights/bank1/thresholds/high[value]
        .minPeriodOn   = 5.
      }
      GrowthLightController bank2 {
        .mode            = setpoints/growthLights/bank2/mode[value]
        .minPeriodOn     = 30.
      }
    }
    Box chalk {
      &value = controllers/chalk[value]
    }
  }
  Box co2 {
    &change = ./controller[controlVariable]
    PidController controller{
      .sensedValue = indoors/co2[value]
      .desiredValue = setpoints/co2[value]
      .Kprop = 0.05
    }
  }
  Box actuators {
    Box screens {
      ActuatorScreen energy {
        .lagPeriod = 10
      }
      ActuatorScreen shade {
        .lagPeriod = 10
      }
      ActuatorScreen blackout {
        .lagPeriod = 10
      }
    }
    Box growthLights {
      ActuatorGrowthLight bank1 {
        .isOn = controllers/growthLights/bank1[isOn]
        .power = 100.
        .parPhotonCoef = 1.6
        .efficiency = 1.0
        .propLw = 0.1
        .ballast = 0.0
      }
      ActuatorGrowthLight bank2 {
        .isOn    = controllers/growthLights/bank2[isOn]
        .power = 80.
      }
    }
    Box heatPipes {
      ActuatorHeatPipe circuit1 {
        .volume = 14.14 
        .flowRate = 10.0
        .k = 0.0063
        .b = 1.25
        .propLw = 0.5
        .inflowTemperature = 80.0
        .indoorsTemperature = 20.0
      }
      ActuatorHeatPipe circuit2 {
        .volume = 14.14 
        .flowRate = 20.0
        .k = 0.0063
        .b = 1.25
        .propLw = 0.5
        .inflowTemperature = 80.0
        .indoorsTemperature = 20.0
      }
    }
    ActuatorChalk chalk {
      .state = controllers/chalk[value]
      .swReflectivity = 0.2
      .lwReflectivity = 0.1
    }
  }
  Box indoors {
    &rh = 70.0
  }
  // BudgetSolver solver {
  // }
  OutputR output {
    .clearPlots = TRUE
    PageR {
      .xAxis = calendar[dateTime]
      PlotR {
        .ports = controllers/screens/*[signal] | actuators/growthLights/bank1[parEmissionBottom] | bank1/setting[signal]
      }
    }
    OutputSelector {
      .beginDateTime = global[beginDate]
    }
  }
}
