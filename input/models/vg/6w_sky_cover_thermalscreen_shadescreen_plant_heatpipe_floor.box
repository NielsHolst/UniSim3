#using vg
Simulation sim {
  Box global {
    Date beginDate {
      .dmy = 1/2/2001
    }
  }
  Calendar calendar {
    // Copenhagen
    .latitude = 55.7
    .longitude = 12.6
    .begin = global/beginDate[value] - 5
    .end = 3/2/2001T12:00:00
    .timeStep = 180
    .timeUnit = "s"
  }
  Outdoors outdoors {
    Records records {
      .fileName = "DNK_Odense.txt"
      .cycle = TRUE
      .ignoreYear = TRUE
    }
    SoilTemperature soilTemperature {
    }
  }
  Sun sun {
  }  Sky sky {
  }
  Box gh {
    Geometry geometry {
      .numSpans = 25
      .spanWidth = 4.0
      .length = 100.0
      .height = 4.0
      .roofPitch = 26.0
    }
    Box construction {
      LeakageVentilation leakage {
        .leakage = 1.0
      }
      Shelter shelter {
        UWind Utop {
        }
        Box products {
          Box covers {
            Cover Single_glass_4mm {
              .swAbsorptivityTop = 0.1
              .swReflectivityTop = 0.1
              .swTransmissivityTop = 0.8
              .swAbsorptivityBottom = 0.1
              .swReflectivityBottom = 0.1
              .swTransmissivityBottom = 0.8
              .lwAbsorptivityTop = 0.83
              .lwReflectivityTop = 0.15
              .lwTransmissivityTop = 0.02
              .lwAbsorptivityBottom = 0.83
              .lwReflectivityBottom = 0.15
              .lwTransmissivityBottom = 0.02
              .Utop = shelter/Utop[value]
              .Ubottom = 6.5
              .heatCapacity = 8400.0
            }
          }
          Box screens {
            Screen LS_Harmony_3647_FR {
              .swAbsorptivityTop = 0.1
              .swReflectivityTop = 0.4
              .swTransmissivityTop = 0.5
              .swAbsorptivityBottom = 0.1
              .swReflectivityBottom = 0.4
              .swTransmissivityBottom = 0.5
              .lwAbsorptivityTop = 0.1
              .lwReflectivityTop = 0.4
              .lwTransmissivityTop = 0.5
              .lwAbsorptivityBottom = 0.1
              .lwReflectivityBottom = 0.4
              .lwTransmissivityBottom = 0.5
              .Utop = 0.6
              .Ubottom = 0.6
              .heatCapacity = 80.0
              .Uinsulation = 1.25
              .UinsulationEffectivity = 0.95
            }
            Screen SuperShade {
              .swAbsorptivityTop = 0.1
              .swReflectivityTop = 0.7
              .swTransmissivityTop = 0.2
              .swAbsorptivityBottom = 0.1
              .swReflectivityBottom = 0.4
              .swTransmissivityBottom = 0.5
              .lwAbsorptivityTop = 0.1
              .lwReflectivityTop = 0.7
              .lwTransmissivityTop = 0.2
              .lwAbsorptivityBottom = 0.1
              .lwReflectivityBottom = 0.4
              .lwTransmissivityBottom = 0.5
              .Utop = 0.6
              .Ubottom = 0.6
              .heatCapacity = 80.0
              .Uinsulation = 1.25
              .UinsulationEffectivity = 0.95
            }
          }
        }
        Faces faces {
          Face roof1 {
            .cover = "Single_glass_4mm"
            .screens = "LS_Harmony_3647_FR+SuperShade"
            .weight = 1.0
          }
          Face roof2 {
            .cover = "Single_glass_4mm"
            .screens = "LS_Harmony_3647_FR+SuperShade"
            .weight = 1.0
          }
          Face side1 {
            .cover = "Single_glass_4mm"
            .screens = "LS_Harmony_3647_FR+SuperShade"
            .weight = 0.6
          }
          Face side2 {
            .cover = "Single_glass_4mm"
            .screens = "LS_Harmony_3647_FR+SuperShade"
            .weight = 0.6
          }
          Face end1 {
            .cover = "Single_glass_4mm"
            .screens = "LS_Harmony_3647_FR+SuperShade"
            .weight = 0.2
          }
          Face end2 {
            .cover = "Single_glass_4mm"
            .screens = "LS_Harmony_3647_FR+SuperShade"
            .weight = 0.2
          }
        }
      }
    }
    
    Box setpoints {
      Box rhMax {
        Box threshold {
          &value = 85.0
        }
        Box band {
          &value = 5.0
        }
      }
      Box heating {
        Box base {
          &value = 21.0
        }
        Box humidityOffset {
          &value = 2.0
        }
      }
      Box heatPipes {
        Box minTemperature {
          &value = 20.0
        }
        Box maxTemperature {
          &value = 95.0
        }
      }
      Box ventilation {
        Box offset {
          &value = 3.0
        }
        Box crack {
          &value = 0.05
        }
        Box temperature {
          Box threshold {
            &value = -5.0
          }
          Box band {
            &value = 1.0
          }
        }
      }
      Box screens {
        Box energy {
          Box threshold {
            &value = 5.0
          }
          Box band {
            &value = 5.0
          }
        }
        Box shade {
          Box threshold {
            &value = 500.0
          }
          Box band {
            &value = 50.0
          }
        }
      }
    }
    Box controllers {
      Box desiredMinTemperature {
        &value = rhControlled[value]
        ProportionalSignal humidityOffset {
          .input = indoors[rh]
          .threshold = setpoints/rhMax/threshold[value]
          .thresholdBand = setpoints/rhMax/band[value]
          .maxSignal = setpoints/heating/humidityOffset[value]
          .increasingSignal = TRUE
        }
        Sum rhControlled {
          .values = setpoints/heating/base[value] | ../humidityOffset[value]
        }
      }
      Box heatPipes { 
        Accumulator inflowTemperature {
          .change = ./controller[controlVariable]
          .minValue = setpoints/heatPipes/minTemperature[value]
          .maxValue = setpoints/heatPipes/maxTemperature[value]
          PidController controller {
            .sensedValue = indoors[temperature]
            .desiredValue = controllers/desiredMinTemperature[value]
            .Kprop = 0.05
            .timeStep = budget[subTimeStep]
          }
        }
      }
      Box ventilation { 
        Sum desiredMaxTemperature {
          .values = ../../desiredMinTemperature[value]|setpoints/ventilation/offset[value]
        }
        ProportionalSignal crack {
          .input = indoors[rh]
          .threshold = setpoints/rhMax/threshold[value]
          .thresholdBand = setpoints/rhMax/band[value]
          .maxSignal = ./max[value]
          .increasingSignal = TRUE
          ProportionalSignal max {
            .input = outdoors[temperature]
            .threshold = setpoints/ventilation/temperature/threshold[value]
            .thresholdBand = setpoints/ventilation/temperature/band[value]
            .maxSignal = setpoints/ventilation/crack[value]
            .increasingSignal = TRUE
          }
        }
        Accumulator opening {
          .change = ./controller[controlVariable]
          .minValue = ../crack[value]
          .maxValue = 1.0
          PidController controller {
            .sensedValue = indoors[temperature]
            .desiredValue = ../../desiredMaxTemperature[value]
            .Kprop = -0.0001
            .timeStep = budget[subTimeStep]
          }
        }
      }
      Box screens {
        ProportionalSignal energy {
          .input = outdoors[radiation]
          .threshold = setpoints/screens/energy/threshold[value]
          .thresholdBand = setpoints/screens/energy/band[value]
          .maxSignal = 1.0
          .increasingSignal = FALSE
        }
        ProportionalSignal shade {
          .input = outdoors[radiation]
          .threshold = setpoints/screens/shade/threshold[value]
          .thresholdBand = setpoints/screens/shade/band[value]
          .maxSignal = 1.0
          .increasingSignal = TRUE
        }
      }
    }
    Box actuators {  // Actuators??
      HeatPipes heatPipes {
        ActuatorHeatPipe circuit1 {
          .volume = 76.4538
          .flowRate = 100.0
          .k = 0.01
          .b = 1.5
          .propLw = 0.5
          .inflowTemperature = controllers/heatPipes/inflowTemperature[value]
          .minTemperature = setpoints/heatPipes/minTemperature[value]
          .maxTemperature = setpoints/heatPipes/maxTemperature[value]
          .indoorsTemperature = indoors[temperature]
        }
        ActuatorHeatPipe circuit2 {
          .volume = 76.4538
          .flowRate = 100.0
          .k = 0.01
          .b = 1.5
          .propLw = 0.5
          .inflowTemperature = controllers/heatPipes/inflowTemperature[value]
          .minTemperature = setpoints/heatPipes/minTemperature[value]
          .maxTemperature = setpoints/heatPipes/maxTemperature[value]
          .indoorsTemperature = indoors[temperature]
        }
      }
      ActuatorVentilation ventilation {
        .ventAreaRatio = 0.36
        .windCoef = 50.0
        .temperatureCoef = 14.0
        .opening = controllers/ventilation/opening[value]
      }
      Box screens {
        ActuatorScreen layer1 {
          .lagPeriod = 10.0
          .desiredState = controllers/screens/energy[value]
        }
        ActuatorScreen layer2 {
          .lagPeriod = 10.0
          .desiredState = controllers/screens/shade[value]
        }
      }
    }
    Plant plant {
      .k_sw = 0.7
      .g0 = 0.0943
      .g1 = 1.64
      .re = 200.0
      .lai = 2.5
      .coverage = 0.95
      .Jmax = 145.52
      .Vcmax = 88.12
      .GammaStar = 53.21
      .Km = 600.0
      .Rd0 = 0.68
      .alpha = 0.8991
      .theta = 0.85
      .Q10 = 1.03
    }
    Floor floor {
      .swAbsorptivityTop = 0.6
      .swReflectivityTop = 0.4
      .swTransmissivityTop = 0.0
      .lwAbsorptivityTop = 0.6
      .lwReflectivityTop = 0.4
      .lwTransmissivityTop = 0.0
      .Utop = 7.5
      .Ubottom = 0.1
      .heatCapacity = 42000.0
    }
    Budget budget {
    }
  }
  OutputR {
    .keepPlots = FALSE
    Box var {
      &balanceSw   = budget/sky[swCoverSkyBalance] 
      &balanceLw   = budget/cover[lwCoverSkyBalance] 
      &balanceConv = budget/cover[convectionTop]
      &balanceAdv  = - budget[ventilationHeatLoss]
    }
    PageR {
      .xAxis = calendar[dateTime]
      PlotR {
        .ports = heatPipes/inflowTemperature[value] | indoors[temperature] | circuit1[energyFlux] | actuators/screens/layer1[state] | outdoors[radiation] | var[*]
      }
    }
    OutputSelector selector {
      .period = 1
      .beginDateTime = global/beginDate[value]
    }
  }
}
