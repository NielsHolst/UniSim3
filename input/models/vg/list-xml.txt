Simulation sim
  .iterations = 1 const
  .steps = 0 <- if exists(Calendar::*[steps]) then Calendar::*[steps] else 1
  .stopIteration = FALSE const
  .stopStep = FALSE const
  .silent = TRUE const
  .unattended = TRUE const
  >iteration = 0
  >step = 0
  >finalStep = 0
  >executionTime = 0
  >hasRun = FALSE
  >hasError = FALSE
  >errorMsg = ""
  Box global
    &beginDate = 2023/01/01 const
  Box scenarios
    &Uinsulation = 0.5 const
  Calendar calendar
    .latitude = 55.4038 [-90,90] const
    .longitude = 10.4024 [-180,180] const
    .timeZone = 1 h const
    .begin = 2022/12/31T00:00:00 <- global[beginDate] - 1
    .end = 2023/01/07T00:00:00 const
    .timeStep = 180 >0 const
    .timeUnit = "s" const
    >steps = 0
    >stepWithinDay = 0
    >date = null
    >time = null
    >dateTime = null
    >atMidnight = FALSE
    >timeStepSecs = 0.0 s
    >timeStepDays = 0.0 d
    >totalTimeSteps = 0
    >totalTime = 0
    >totalDays = 0.0 d
    >dayOfYear = 0 [1;366]
    >bareDate = null
  Outdoors outdoors
    .co2 = 400.0 ppm const
    .temperature = 0.0 oC <- ./records[Tair]
    .rh = 0.0 [0;100] <- ./records[Rhair]
    .radiation = 0.0 W/m2 <- ./records[GlobRad]
    .propPar = 0.45 [0;1] const
    .propUv = 0.07 [0;1] const
    .windSpeed = 0.0 m/s <- ./records[Windspeed]
    >par = 0.0 mymol PAR/m2/s
    >soilTemperature = 0.0 oC <- ./soilTemperature[value]
    Records records
      .fileName = "DNK_Odense.txt" const
      .dateColumnName = "Date" const
      .timeColumnName = "Time" const
      .cycle = TRUE const
      .ignoreYear = TRUE const
      .calendarDateTime = null <- calendar[dateTime]
      >firstDateTime = 2001/01/01T00:00:00
      >lastDateTime = null
      >currentDateTime = 2001/01/01T00:00:00
      >nextDateTime = 2001/01/01T00:00:00
      >currentDate = 2001/01/01
      >nextDate = 2001/01/01
      >currentTime = 00:00:00
      >nextTime = 00:00:00
      >Tair = 0.0
      >Rhair = 0.0
      >GlobRad = 0.0
      >DifRad = 0.0
      >Windspeed = 0.0
    SoilTemperature soilTemperature
      .initial = 1.7 oC const
      .min = 2.0 oC const
      .max = 40.0 oC const
      .outdoorsTemperature = 0.0 <- outdoors[temperature]
      .atMidnight = FALSE <- calendar[atMidnight]
      >value = 0.0 oC
  Sky sky
    .checkBoundaries = FALSE const
    .intercept = 0.732 [0;1] const
    .slope = 0.00635 /K const
    .airTemperature = 0.0 oC <- outdoors[temperature]
    .rh = 0.0 [0;100] <- outdoors[rh]
    .Tsky = -273.0 oC <- if exists(outdoors[Tsky]) then outdoors[Tsky] else - 273.0
    >swAbsorptivityTop = 0.0 [0;1]
    >swReflectivityTop = 0.0 [0;1]
    >swTransmissivityTop = 1.0 [0;1]
    >swAbsorptivityBottom = 0.0 [0;1]
    >swReflectivityBottom = 0.0 [0;1]
    >swTransmissivityBottom = 1.0 [0;1]
    >lwAbsorptivityTop = 0.0 [0;1]
    >lwReflectivityTop = 0.0 [0;1]
    >lwTransmissivityTop = 1.0 [0;1]
    >lwAbsorptivityBottom = 0.0 [0;1]
    >lwReflectivityBottom = 0.0 [0;1]
    >lwTransmissivityBottom = 1.0 [0;1]
    >Utop = 0.0 W/K/m2 ground
    >Ubottom = 0.0 W/K/m2 ground
    >heatCapacity = 0.0 J/K/m2 ground
    >temperature = 0.0 oC
  Box gh
    Geometry geometry
      .numSpans = 25 const
      .spanWidth = 4.0 m const
      .length = 100.0 m const
      .height = 4.0 m const
      .roofPitch = 26.0 [0;180] const
      >sideArea = 0.0 m2
      >endArea = 0.0 m2
      >roofArea = 0.0 m2
      >coverArea = 0.0 m2
      >groundArea = 0.0 m2
      >volume = 0.0 m3
      >coverPerGroundArea = 0.0 m2/m2
      >averageHeight = 0.0 m
    Box construction
      LeakageVentilation leakage
        .leakage = 0.1 /h const
        .windSpeed = 0.0 <- outdoors[windSpeed]
        >value = 0.0 /h
      Shelter shelter
        .transmissivityReduction = 0.2 [0;1] const
        UWind Utop
          .windSpeed = 0.0 m/s <- outdoors[windSpeed]
          .UwindMinimum = 2.8 W/m2/K const
          .UwindSlope = 0.5 W/m2/K/(m/s) const
          .UwindExponent = 0.8 const
          >value = 0.0 W/K/m2 layer
        Shading shading
          .swReflectivities = c(0.2) <- ./*[swReflectivity]
          .lwReflectivities = c(0.2) <- ./*[lwReflectivity]
          .states = c(0.0) <- ./*[state]
          >swReflectivity = 0.0 [0;1]
          >lwReflectivity = 0.0 [0;1]
          ShadingAgent test
            .swReflectivity = 0.2 [0;1] const
            .lwReflectivity = 0.2 [0;1] const
            .state = 0.0 [0;1] <- setpoints/shading/test[value]
        Box products
          Box covers
            Cover Single_glass_4mm
              .checkBoundaries = TRUE const
              .swAbsorptivityTop = 0.1 [0;1] const
              .swReflectivityTop = 0.1 [0;1] const
              .swTransmissivityTop = 0.8 [0;1] const
              .swAbsorptivityBottom = 0.1 [0;1] const
              .swReflectivityBottom = 0.1 [0;1] const
              .swTransmissivityBottom = 0.8 [0;1] const
              .lwAbsorptivityTop = 0.83 [0;1] const
              .lwReflectivityTop = 0.15 [0;1] const
              .lwTransmissivityTop = 0.02 [0;1] const
              .lwAbsorptivityBottom = 0.83 [0;1] const
              .lwReflectivityBottom = 0.15 [0;1] const
              .lwTransmissivityBottom = 0.02 [0;1] const
              .Utop = 0.0 W/K/m2 layer <- shelter/Utop[value]
              .Ubottom = 6.5 W/K/m2 layer const
              .heatCapacity = 8400.0 J/K/m2 layer const
            Cover PC_3_wall_16_mm
              .checkBoundaries = TRUE const
              .swAbsorptivityTop = 0.0 [0;1] const
              .swReflectivityTop = 0.26 [0;1] const
              .swTransmissivityTop = 0.74 [0;1] const
              .swAbsorptivityBottom = 0.0 [0;1] const
              .swReflectivityBottom = 0.26 [0;1] const
              .swTransmissivityBottom = 0.74 [0;1] const
              .lwAbsorptivityTop = 0.3 [0;1] const
              .lwReflectivityTop = 0.5 [0;1] const
              .lwTransmissivityTop = 0.2 [0;1] const
              .lwAbsorptivityBottom = 0.3 [0;1] const
              .lwReflectivityBottom = 0.5 [0;1] const
              .lwTransmissivityBottom = 0.2 [0;1] const
              .Utop = 0.0 W/K/m2 layer <- shelter/Utop[value]
              .Ubottom = 2.4 W/K/m2 layer const
              .heatCapacity = 1.0 J/K/m2 layer const
          Box screens
            Screen LS_Harmony_3647_FR
              .checkBoundaries = TRUE const
              .swAbsorptivityTop = 0.48 [0;1] const
              .swReflectivityTop = 0.02 [0;1] const
              .swTransmissivityTop = 0.5 [0;1] const
              .swAbsorptivityBottom = 0.0 [0;1] const
              .swReflectivityBottom = 0.5 [0;1] const
              .swTransmissivityBottom = 0.5 [0;1] const
              .lwAbsorptivityTop = 0.48 [0;1] const
              .lwReflectivityTop = 0.02 [0;1] const
              .lwTransmissivityTop = 0.5 [0;1] const
              .lwAbsorptivityBottom = 0.0 [0;1] const
              .lwReflectivityBottom = 0.5 [0;1] const
              .lwTransmissivityBottom = 0.5 [0;1] const
              .Utop = 0.6 W/K/m2 layer const
              .Ubottom = 0.6 W/K/m2 layer const
              .heatCapacity = 80.0 J/K/m2 layer const
              .energySaving = 0.0 % const
              .Uinsulation = 1.2 W/K/m2 layer const
              .UinsulationEffectivity = 0.95 [0;1] const
            Screen none
              .checkBoundaries = TRUE const
              .swAbsorptivityTop = 0.0 [0;1] const
              .swReflectivityTop = 0.0 [0;1] const
              .swTransmissivityTop = 1.0 [0;1] const
              .swAbsorptivityBottom = 0.0 [0;1] const
              .swReflectivityBottom = 0.0 [0;1] const
              .swTransmissivityBottom = 1.0 [0;1] const
              .lwAbsorptivityTop = 0.0 [0;1] const
              .lwReflectivityTop = 0.0 [0;1] const
              .lwTransmissivityTop = 1.0 [0;1] const
              .lwAbsorptivityBottom = 0.0 [0;1] const
              .lwReflectivityBottom = 0.0 [0;1] const
              .lwTransmissivityBottom = 1.0 [0;1] const
              .Utop = 0.0 W/K/m2 layer const
              .Ubottom = 0.0 W/K/m2 layer const
              .heatCapacity = 0.0 J/K/m2 layer const
              .energySaving = 0.0 % const
              .Uinsulation = inf W/K/m2 layer const
              .UinsulationEffectivity = 1.0 [0;1] const
        Faces faces
          Face roof1
            .cover = "Single_glass_4mm" const
            .screens = "LS_Harmony_3647_FR+none+none" const
            .area = 0.0 m2 <- gh/geometry[roofArea] / 2
            .weight = 1.0 [0;1] const
            >screenMaterials = c()
            >numScreens = 0
          Face roof2
            .cover = "Single_glass_4mm" const
            .screens = "LS_Harmony_3647_FR+none+none" const
            .area = 0.0 m2 <- gh/geometry[roofArea] / 2
            .weight = 1.0 [0;1] const
            >screenMaterials = c()
            >numScreens = 0
          Face side1
            .cover = "PC_3_wall_16_mm" const
            .screens = "LS_Harmony_3647_FR+none+none" const
            .area = 0.0 m2 <- gh/geometry[sideArea] / 2
            .weight = 0.6 [0;1] const
            >screenMaterials = c()
            >numScreens = 0
          Face side2
            .cover = "PC_3_wall_16_mm" const
            .screens = "LS_Harmony_3647_FR+none+none" const
            .area = 0.0 m2 <- gh/geometry[sideArea] / 2
            .weight = 0.6 [0;1] const
            >screenMaterials = c()
            >numScreens = 0
          Face end1
            .cover = "PC_3_wall_16_mm" const
            .screens = "LS_Harmony_3647_FR+none+none" const
            .area = 0.0 m2 <- gh/geometry[endArea] / 2
            .weight = 0.2 [0;1] const
            >screenMaterials = c()
            >numScreens = 0
          Face end2
            .cover = "PC_3_wall_16_mm" const
            .screens = "LS_Harmony_3647_FR+none+none" const
            .area = 0.0 m2 <- gh/geometry[endArea] / 2
            .weight = 0.2 [0;1] const
            >screenMaterials = c()
            >numScreens = 0
        ShelterLayers layers
          AverageCover cover
            .checkBoundaries = FALSE const
            .areas = c(0.0,0.0,0.0,0.0,0.0,0.0) <- shelter/faces/*[area]
            .weights = c(1.0,1.0,0.6,0.6,0.2,0.2) <- shelter/faces/*[weight]
            .groundArea = 0.0 <- gh/geometry[groundArea]
            .transmissivityReduction = 0.2 <- shelter[transmissivityReduction]
            .swShading = 0.0 <- shelter/shading[swReflectivity]
            .lwShading = 0.0 <- shelter/shading[lwReflectivity]
            .faceAreas = c(0.0,0.0,0.0,0.0,0.0,0.0) <- shelter/faces/*[area]
            .screenStates = c(0.0,0.0,0.0) <- actuators/screens/*[state]
            >swAbsorptivityTop = 0.0 [0;1]
            >swReflectivityTop = 0.0 [0;1]
            >swTransmissivityTop = 1.0 [0;1]
            >swAbsorptivityBottom = 0.0 [0;1]
            >swReflectivityBottom = 0.0 [0;1]
            >swTransmissivityBottom = 1.0 [0;1]
            >lwAbsorptivityTop = 0.0 [0;1]
            >lwReflectivityTop = 0.0 [0;1]
            >lwTransmissivityTop = 1.0 [0;1]
            >lwAbsorptivityBottom = 0.0 [0;1]
            >lwReflectivityBottom = 0.0 [0;1]
            >lwTransmissivityBottom = 1.0 [0;1]
            >Utop = 0.0 W/K/m2 ground
            >Ubottom = 0.0 W/K/m2 ground
            >heatCapacity = 0.0 J/K/m2 ground
            >UbottomAdj = 0.0
            >UtopAdj = 0.0
          Box screens
            AverageScreen screen1
              .checkBoundaries = FALSE const
              .areas = c(0.0,0.0,0.0,0.0,0.0,0.0) <- shelter/faces/*[area]
              .weights = c(1.0,1.0,0.6,0.6,0.2,0.2) <- shelter/faces/*[weight]
              .groundArea = 0.0 <- gh/geometry[groundArea]
              .state = 0.0 <- actuators/screens/layer1[state]
              >swAbsorptivityTop = 0.0 [0;1]
              >swReflectivityTop = 0.0 [0;1]
              >swTransmissivityTop = 1.0 [0;1]
              >swAbsorptivityBottom = 0.0 [0;1]
              >swReflectivityBottom = 0.0 [0;1]
              >swTransmissivityBottom = 1.0 [0;1]
              >lwAbsorptivityTop = 0.0 [0;1]
              >lwReflectivityTop = 0.0 [0;1]
              >lwTransmissivityTop = 1.0 [0;1]
              >lwAbsorptivityBottom = 0.0 [0;1]
              >lwReflectivityBottom = 0.0 [0;1]
              >lwTransmissivityBottom = 1.0 [0;1]
              >Utop = 0.0 W/K/m2 ground
              >Ubottom = 0.0 W/K/m2 ground
              >heatCapacity = 0.0 J/K/m2 ground
            AverageScreen screen2
              .checkBoundaries = FALSE const
              .areas = c(0.0,0.0,0.0,0.0,0.0,0.0) <- shelter/faces/*[area]
              .weights = c(1.0,1.0,0.6,0.6,0.2,0.2) <- shelter/faces/*[weight]
              .groundArea = 0.0 <- gh/geometry[groundArea]
              .state = 0.0 <- actuators/screens/layer2[state]
              >swAbsorptivityTop = 0.0 [0;1]
              >swReflectivityTop = 0.0 [0;1]
              >swTransmissivityTop = 1.0 [0;1]
              >swAbsorptivityBottom = 0.0 [0;1]
              >swReflectivityBottom = 0.0 [0;1]
              >swTransmissivityBottom = 1.0 [0;1]
              >lwAbsorptivityTop = 0.0 [0;1]
              >lwReflectivityTop = 0.0 [0;1]
              >lwTransmissivityTop = 1.0 [0;1]
              >lwAbsorptivityBottom = 0.0 [0;1]
              >lwReflectivityBottom = 0.0 [0;1]
              >lwTransmissivityBottom = 1.0 [0;1]
              >Utop = 0.0 W/K/m2 ground
              >Ubottom = 0.0 W/K/m2 ground
              >heatCapacity = 0.0 J/K/m2 ground
            AverageScreen screen3
              .checkBoundaries = FALSE const
              .areas = c(0.0,0.0,0.0,0.0,0.0,0.0) <- shelter/faces/*[area]
              .weights = c(1.0,1.0,0.6,0.6,0.2,0.2) <- shelter/faces/*[weight]
              .groundArea = 0.0 <- gh/geometry[groundArea]
              .state = 0.0 <- actuators/screens/layer3[state]
              >swAbsorptivityTop = 0.0 [0;1]
              >swReflectivityTop = 0.0 [0;1]
              >swTransmissivityTop = 1.0 [0;1]
              >swAbsorptivityBottom = 0.0 [0;1]
              >swReflectivityBottom = 0.0 [0;1]
              >swTransmissivityBottom = 1.0 [0;1]
              >lwAbsorptivityTop = 0.0 [0;1]
              >lwReflectivityTop = 0.0 [0;1]
              >lwTransmissivityTop = 1.0 [0;1]
              >lwAbsorptivityBottom = 0.0 [0;1]
              >lwReflectivityBottom = 0.0 [0;1]
              >lwTransmissivityBottom = 1.0 [0;1]
              >Utop = 0.0 W/K/m2 ground
              >Ubottom = 0.0 W/K/m2 ground
              >heatCapacity = 0.0 J/K/m2 ground
    Box setpoints
      Box rhMax
        PrioritySignal threshold
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 85.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        PrioritySignal band
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 5.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
      Box heating
        PrioritySignal base
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 21.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        PrioritySignal humidityOffset
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 2.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        PrioritySignal minTemperature
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 20.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        PrioritySignal maxTemperature
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 80.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
      Box ventilation
        PrioritySignal offset
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 2.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        PrioritySignal crack
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 0.05 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        Box temperature
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = -5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 1.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
      Box screens
        Box energy1
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box energy2
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box energy3
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 5.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box shade1
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 500.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 50.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box shade2
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 500.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 50.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box shade3
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 500.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 50.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box blackout1
          PrioritySignal state
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box blackout2
          PrioritySignal state
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
        Box blackout3
          PrioritySignal state
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
      Box shading
        PrioritySignal test
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 0.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
      Box growthLights
        Box bank1
          PrioritySignal mode
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE,FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0,0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 06:00:00 const
              .endTime = 20:00:00 const
              .signalInside = 1.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          Box thresholds
            PrioritySignal low
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
              .mySignals = c(0.0) <- ./BaseSignal::*[signal]
              .reverseOrder = FALSE y|n const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
              DateTimeSignal 
                .initialSignal = 0.0 const
                .initialFlag = FALSE const
                .currentDateTime = null <- calendar[dateTime]
                .beginDate = 1/1 const
                .endDate = 31/12 const
                .beginTime = 00:00:00 const
                .endTime = 00:00:00 const
                .signalInside = 5.0 const
                .signalOutside = 0.0 const
                .circadian = TRUE const
                >signal = 0.0
                >flagIsUp = FALSE
                >flagJustRaised = FALSE
                >flagJustLowered = FALSE
                >value = 0.0
            PrioritySignal high
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
              .mySignals = c(0.0) <- ./BaseSignal::*[signal]
              .reverseOrder = FALSE y|n const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
              DateTimeSignal 
                .initialSignal = 0.0 const
                .initialFlag = FALSE const
                .currentDateTime = null <- calendar[dateTime]
                .beginDate = 1/1 const
                .endDate = 31/12 const
                .beginTime = 00:00:00 const
                .endTime = 00:00:00 const
                .signalInside = 600.0 const
                .signalOutside = 0.0 const
                .circadian = TRUE const
                >signal = 0.0
                >flagIsUp = FALSE
                >flagJustRaised = FALSE
                >flagJustLowered = FALSE
                >value = 0.0
        Box bank2
          PrioritySignal mode
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          Box thresholds
            PrioritySignal low
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
              .mySignals = c(0.0) <- ./BaseSignal::*[signal]
              .reverseOrder = FALSE y|n const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
              DateTimeSignal 
                .initialSignal = 0.0 const
                .initialFlag = FALSE const
                .currentDateTime = null <- calendar[dateTime]
                .beginDate = 1/1 const
                .endDate = 31/12 const
                .beginTime = 00:00:00 const
                .endTime = 00:00:00 const
                .signalInside = 5.0 const
                .signalOutside = 0.0 const
                .circadian = TRUE const
                >signal = 0.0
                >flagIsUp = FALSE
                >flagJustRaised = FALSE
                >flagJustLowered = FALSE
                >value = 0.0
            PrioritySignal high
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
              .mySignals = c(0.0) <- ./BaseSignal::*[signal]
              .reverseOrder = FALSE y|n const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
              DateTimeSignal 
                .initialSignal = 0.0 const
                .initialFlag = FALSE const
                .currentDateTime = null <- calendar[dateTime]
                .beginDate = 1/1 const
                .endDate = 31/12 const
                .beginTime = 00:00:00 const
                .endTime = 00:00:00 const
                .signalInside = 600.0 const
                .signalOutside = 0.0 const
                .circadian = TRUE const
                >signal = 0.0
                >flagIsUp = FALSE
                >flagJustRaised = FALSE
                >flagJustLowered = FALSE
                >value = 0.0
        Box bank3
          PrioritySignal mode
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.0 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          Box thresholds
            PrioritySignal low
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
              .mySignals = c(0.0) <- ./BaseSignal::*[signal]
              .reverseOrder = FALSE y|n const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
              DateTimeSignal 
                .initialSignal = 0.0 const
                .initialFlag = FALSE const
                .currentDateTime = null <- calendar[dateTime]
                .beginDate = 1/1 const
                .endDate = 31/12 const
                .beginTime = 00:00:00 const
                .endTime = 00:00:00 const
                .signalInside = 5.0 const
                .signalOutside = 0.0 const
                .circadian = TRUE const
                >signal = 0.0
                >flagIsUp = FALSE
                >flagJustRaised = FALSE
                >flagJustLowered = FALSE
                >value = 0.0
            PrioritySignal high
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
              .mySignals = c(0.0) <- ./BaseSignal::*[signal]
              .reverseOrder = FALSE y|n const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
              DateTimeSignal 
                .initialSignal = 0.0 const
                .initialFlag = FALSE const
                .currentDateTime = null <- calendar[dateTime]
                .beginDate = 1/1 const
                .endDate = 31/12 const
                .beginTime = 00:00:00 const
                .endTime = 00:00:00 const
                .signalInside = 600.0 const
                .signalOutside = 0.0 const
                .circadian = TRUE const
                >signal = 0.0
                >flagIsUp = FALSE
                >flagJustRaised = FALSE
                >flagJustLowered = FALSE
                >value = 0.0
      Box co2
        PrioritySignal concentration
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 900.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        PrioritySignal capacity
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
          .mySignals = c(0.0) <- ./BaseSignal::*[signal]
          .reverseOrder = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          DateTimeSignal 
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .currentDateTime = null <- calendar[dateTime]
            .beginDate = 1/1 const
            .endDate = 31/12 const
            .beginTime = 00:00:00 const
            .endTime = 00:00:00 const
            .signalInside = 50.0 const
            .signalOutside = 0.0 const
            .circadian = TRUE const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        Box ventilation
          PrioritySignal threshold
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.1 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
          PrioritySignal band
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .myFlags = c(FALSE) <- ./BaseSignal::*[flagIsUp]
            .mySignals = c(0.0) <- ./BaseSignal::*[signal]
            .reverseOrder = FALSE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
            DateTimeSignal 
              .initialSignal = 0.0 const
              .initialFlag = FALSE const
              .currentDateTime = null <- calendar[dateTime]
              .beginDate = 1/1 const
              .endDate = 31/12 const
              .beginTime = 00:00:00 const
              .endTime = 00:00:00 const
              .signalInside = 0.2 const
              .signalOutside = 0.0 const
              .circadian = TRUE const
              >signal = 0.0
              >flagIsUp = FALSE
              >flagJustRaised = FALSE
              >flagJustLowered = FALSE
              >value = 0.0
    Box controllers
      IgnoredBox heating
        ProportionalSignal humidityOffset
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- indoors[rh]
          .threshold = 0.0 <- setpoints/rhMax/threshold[value]
          .thresholdBand = 0.0 <- setpoints/rhMax/band[value]
          .minSignal = 0.0 const
          .maxSignal = 0.0 <- setpoints/heating/humidityOffset[value]
          .increasingSignal = TRUE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        Sum desiredIndoorsTemperature
          .values = c(0.0,0.0) <- setpoints/heating/base[value]|../humidityOffset[value]
          >value = 0.0
          >count = 0
        Accumulator inflowTemperature
          .initial = 0.0 const
          .change = 0.0 <- ./controller[controlVariable]
          .minValue = 0.0 <- setpoints/heating/minTemperature[value]
          .maxValue = 0.0 <- setpoints/heating/maxTemperature[value]
          >value = 0.0
          >signal = 0.0
          PidController controller
            .sensedValue = 0.0 <- indoors[temperature]
            .desiredValue = 0.0 <- ../../desiredIndoorsTemperature[value]
            .Kprop = 0.05 const
            .Kint = 0.0 /min const
            .Kderiv = 0.0 min const
            .minimum = -1.79769e+308 const
            .maximum = 1.79769e+308 const
            .timeStep = 0.0 s <- budget[subTimeStep]
            >controlVariable = 0.0
            >error = 0.0
            >integral = 0.0 min
            >derivative = 0.0 /min
      IgnoredBox ventilation
        Sum desiredIndoorsTemperature
          .values = c(0.0,0.0) <- controllers/heating/desiredIndoorsTemperature[value]|setpoints/ventilation/offset[value]
          >value = 0.0
          >count = 0
        ProportionalSignal crack
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- indoors[rh]
          .threshold = 0.0 <- setpoints/rhMax/threshold[value]
          .thresholdBand = 0.0 <- setpoints/rhMax/band[value]
          .minSignal = 0.0 const
          .maxSignal = 0.0 <- ./max[value]
          .increasingSignal = TRUE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
          ProportionalSignal max
            .initialSignal = 0.0 const
            .initialFlag = FALSE const
            .input = 0.0 <- outdoors[temperature]
            .threshold = 0.0 <- setpoints/ventilation/temperature/threshold[value]
            .thresholdBand = 0.0 <- setpoints/ventilation/temperature/band[value]
            .minSignal = 0.0 const
            .maxSignal = 0.0 <- setpoints/ventilation/crack[value]
            .increasingSignal = TRUE y|n const
            >signal = 0.0
            >flagIsUp = FALSE
            >flagJustRaised = FALSE
            >flagJustLowered = FALSE
            >value = 0.0
        Accumulator opening
          .initial = 0.0 const
          .change = 0.0 <- ./controller[controlVariable]
          .minValue = 0.0 <- ../crack[value]
          .maxValue = 1.0 const
          >value = 0.0
          >signal = 0.0
          PidController controller
            .sensedValue = 0.0 <- indoors[temperature]
            .desiredValue = 0.0 <- ../../desiredIndoorsTemperature[value]
            .Kprop = -0.0001 const
            .Kint = 0.0 /min const
            .Kderiv = 0.0 min const
            .minimum = -1.79769e+308 const
            .maximum = 1.79769e+308 const
            .timeStep = 0.0 s <- budget[subTimeStep]
            >controlVariable = 0.0
            >error = 0.0
            >integral = 0.0 min
            >derivative = 0.0 /min
      Box co2
        ProportionalSignal max
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- controllers/ventilation/opening[value]
          .threshold = 0.0 <- setpoints/co2/ventilation/threshold[value]
          .thresholdBand = 0.0 <- setpoints/co2/ventilation/band[value]
          .minSignal = 0.0 const
          .maxSignal = 0.0 <- setpoints/co2/capacity[value]
          .increasingSignal = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
      Box screens
        ProportionalSignal energy1
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- outdoors[radiation]
          .threshold = 0.0 <- setpoints/screens/energy1/threshold[value]
          .thresholdBand = 0.0 <- setpoints/screens/energy1/band[value]
          .minSignal = 0.0 const
          .maxSignal = 1.0 const
          .increasingSignal = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        ProportionalSignal energy2
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- outdoors[radiation]
          .threshold = 0.0 <- setpoints/screens/energy2/threshold[value]
          .thresholdBand = 0.0 <- setpoints/screens/energy2/band[value]
          .minSignal = 0.0 const
          .maxSignal = 1.0 const
          .increasingSignal = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        ProportionalSignal energy3
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- outdoors[radiation]
          .threshold = 0.0 <- setpoints/screens/energy3/threshold[value]
          .thresholdBand = 0.0 <- setpoints/screens/energy3/band[value]
          .minSignal = 0.0 const
          .maxSignal = 1.0 const
          .increasingSignal = FALSE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        ProportionalSignal shade1
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- outdoors[radiation]
          .threshold = 0.0 <- setpoints/screens/shade1/threshold[value]
          .thresholdBand = 0.0 <- setpoints/screens/shade1/band[value]
          .minSignal = 0.0 const
          .maxSignal = 1.0 const
          .increasingSignal = TRUE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        ProportionalSignal shade2
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- outdoors[radiation]
          .threshold = 0.0 <- setpoints/screens/shade2/threshold[value]
          .thresholdBand = 0.0 <- setpoints/screens/shade2/band[value]
          .minSignal = 0.0 const
          .maxSignal = 1.0 const
          .increasingSignal = TRUE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        ProportionalSignal shade3
          .initialSignal = 0.0 const
          .initialFlag = FALSE const
          .input = 0.0 <- outdoors[radiation]
          .threshold = 0.0 <- setpoints/screens/shade3/threshold[value]
          .thresholdBand = 0.0 <- setpoints/screens/shade3/band[value]
          .minSignal = 0.0 const
          .maxSignal = 1.0 const
          .increasingSignal = TRUE y|n const
          >signal = 0.0
          >flagIsUp = FALSE
          >flagJustRaised = FALSE
          >flagJustLowered = FALSE
          >value = 0.0
        Box blackout1
          &value = 0.0 <- setpoints/screens/blackout1/state[value]
        Box blackout2
          &value = 0.0 <- setpoints/screens/blackout2/state[value]
        Box blackout3
          &value = 0.0 <- setpoints/screens/blackout3/state[value]
      Box growthLights
        GrowthLightController bank3
          .mode = 0 0|1|10 <- setpoints/growthLights/bank3/mode[value]
          .input = 0.0 <- outdoors[radiation]
          .thresholdLow = 0.0 W/m2 <- setpoints/growthLights/bank3/thresholds/low[value]
          .thresholdHigh = 0.0 W/m2 <- setpoints/growthLights/bank3/thresholds/high[value]
          .minPeriodOn = 0.0 min <- actuators/growthLights/bank3[minPeriodOn]
          .timeStepSecs = 0.0 <- calendar[timeStepSecs]
          >isOn = FALSE
          >periodOn = 0.0 min
        GrowthLightController bank2
          .mode = 0 0|1|10 <- setpoints/growthLights/bank2/mode[value]
          .input = 0.0 <- outdoors[radiation]
          .thresholdLow = 0.0 W/m2 <- setpoints/growthLights/bank2/thresholds/low[value]
          .thresholdHigh = 0.0 W/m2 <- setpoints/growthLights/bank2/thresholds/high[value]
          .minPeriodOn = 0.0 min <- actuators/growthLights/bank2[minPeriodOn]
          .timeStepSecs = 0.0 <- calendar[timeStepSecs]
          >isOn = FALSE
          >periodOn = 0.0 min
        GrowthLightController bank1
          .mode = 0 0|1|10 <- setpoints/growthLights/bank1/mode[value]
          .input = 0.0 <- outdoors[radiation]
          .thresholdLow = 0.0 W/m2 <- setpoints/growthLights/bank1/thresholds/low[value]
          .thresholdHigh = 0.0 W/m2 <- setpoints/growthLights/bank1/thresholds/high[value]
          .minPeriodOn = 0.0 min <- actuators/growthLights/bank1[minPeriodOn]
          .timeStepSecs = 0.0 <- calendar[timeStepSecs]
          >isOn = FALSE
          >periodOn = 0.0 min
    Actuators actuators
      HeatPipes heatPipes
        .checkBoundaries = FALSE const
        .lwEmissionTopPipes = c(0.0,0.0) <- ./*[lwEmissionTop]
        .lwEmissionBottomPipes = c(0.0,0.0) <- ./*[lwEmissionBottom]
        .convectionTopPipes = c(0.0,0.0) <- ./*[convectionTop]
        .convectionBottomPipes = c(0.0,0.0) <- ./*[convectionBottom]
        .inflowTemperaturePipes = c(0.0,0.0) <- ./*[inflowTemperature]
        .isHeatingPipes = c(FALSE,FALSE) <- ./*[isHeating]
        >swAbsorptivityTop = 0.0 [0;1]
        >swReflectivityTop = 0.0 [0;1]
        >swTransmissivityTop = 1.0 [0;1]
        >swAbsorptivityBottom = 0.0 [0;1]
        >swReflectivityBottom = 0.0 [0;1]
        >swTransmissivityBottom = 1.0 [0;1]
        >lwAbsorptivityTop = 0.0 [0;1]
        >lwReflectivityTop = 0.0 [0;1]
        >lwTransmissivityTop = 1.0 [0;1]
        >lwAbsorptivityBottom = 0.0 [0;1]
        >lwReflectivityBottom = 0.0 [0;1]
        >lwTransmissivityBottom = 1.0 [0;1]
        >Utop = 0.0 W/K/m2 ground
        >Ubottom = 0.0 W/K/m2 ground
        >heatCapacity = 0.0 J/K/m2 ground
        >lwEmissionTop = 0.0 W/m2
        >lwEmissionBottom = 0.0 W/m2
        >convectionTop = 0.0 W/m2
        >convectionBottom = 0.0 W/m2
        >heatFlux = 0.0 W/m2
        >inflowTemperatureAvg = 0.0 oC
        >isHeating = FALSE
        ActuatorHeatPipe circuit2
          .volume = 76.4538 m3 const
          .flowRate = 50.0 m3/h const
          .k = 0.01 const
          .b = 1.5 const
          .propLw = 0.2 [0;1] const
          .inflowTemperature = 0.0 oC <- controllers/heating/inflowTemperature[value]
          .minTemperature = 0.0 oC <- setpoints/heating/minTemperature[value]
          .maxTemperature = 0.0 oC <- setpoints/heating/maxTemperature[value]
          .indoorsTemperature = 0.0 oC <- indoors[temperature]
          .groundArea = 0.0 m2 <- gh/geometry[groundArea]
          .timeStep = 0.0 <- budget[subTimeStep]
          >outflowTemperature = 0.0 oC
          >transitTime = 0.0 min
          >temperatureDrop = 0.0 oC
          >energyFlux = 0.0 W/m2
          >lwEmissionTop = 0.0 W/m2
          >lwEmissionBottom = 0.0 W/m2
          >convectionTop = 0.0 W/m2
          >convectionBottom = 0.0 W/m2
          >isHeating = FALSE
        ActuatorHeatPipe circuit1
          .volume = 76.4538 m3 const
          .flowRate = 50.0 m3/h const
          .k = 0.01 const
          .b = 1.5 const
          .propLw = 0.2 [0;1] const
          .inflowTemperature = 0.0 oC <- controllers/heating/inflowTemperature[value]
          .minTemperature = 0.0 oC <- setpoints/heating/minTemperature[value]
          .maxTemperature = 0.0 oC <- setpoints/heating/maxTemperature[value]
          .indoorsTemperature = 0.0 oC <- indoors[temperature]
          .groundArea = 0.0 m2 <- gh/geometry[groundArea]
          .timeStep = 0.0 <- budget[subTimeStep]
          >outflowTemperature = 0.0 oC
          >transitTime = 0.0 min
          >temperatureDrop = 0.0 oC
          >energyFlux = 0.0 W/m2
          >lwEmissionTop = 0.0 W/m2
          >lwEmissionBottom = 0.0 W/m2
          >convectionTop = 0.0 W/m2
          >convectionBottom = 0.0 W/m2
          >isHeating = FALSE
      ActuatorVentilation ventilation
        .ventAreaRatio = 0.36 int const
        .windCoef = 50.0 /h/(m/s) const
        .temperatureCoef = 14.0 /h/K const
        .opening = 0.0 [0;1] <- controllers/ventilation/opening[value]
        .windSpeed = 0.0 <- outdoors[windSpeed]
        .leakage = 0.0 <- gh/construction/leakage[value]
        .crackOpening = 0.0 <- gh/controllers/ventilation/crack[value]
        .outdoorsTemperature = 0.0 <- outdoors[temperature]
        .indoorsTemperature = 0.0 <- gh/budget/indoors[temperature]
        .outdoorsRh = 0.0 <- outdoors[rh]
        .indoorsRh = 0.0 <- gh/budget/indoors[rh]
        .timeStep = 0.0 <- budget[subTimeStep]
        >ventFlux = 0.0 /h
        >maxVentFlux = 0.0 /h
        >value = 0.0 /h
        >isVentilating = FALSE
      Box screens
        ActuatorScreen layer1
          .lagPeriod = 10.0 min const
          .desiredState = 0.0 [0;1] <- max(controllers/screens/energy1[value]|controllers/screens/shade1[value])
          .timeStepSecs = 0.0 <- calendar[timeStepSecs]
          >state = 0.0 [0;1]
        ActuatorScreen layer2
          .lagPeriod = 10.0 min const
          .desiredState = 0.0 [0;1] <- max(controllers/screens/shade2[value])
          .timeStepSecs = 0.0 <- calendar[timeStepSecs]
          >state = 0.0 [0;1]
        ActuatorScreen layer3
          .lagPeriod = 10.0 min const
          .desiredState = 0.0 [0;1] <- max(controllers/screens/blackout3[value])
          .timeStepSecs = 0.0 <- calendar[timeStepSecs]
          >state = 0.0 [0;1]
      GrowthLights growthLights
        .checkBoundaries = FALSE const
        .parEmissionBottomLights = c(0.0,0.0,0.0) <- ./*[parEmissionBottom]
        .swEmissionBottomLights = c(0.0,0.0,0.0) <- ./*[swEmissionBottom]
        .lwEmissionBottomLights = c(0.0,0.0,0.0) <- ./*[lwEmissionBottom]
        .lwEmissionTopLights = c(0.0,0.0,0.0) <- ./*[lwEmissionTop]
        .convectionBottomLights = c(0.0,0.0,0.0) <- ./*[convectionBottom]
        .convectionTopLights = c(0.0,0.0,0.0) <- ./*[convectionTop]
        .powerUsageLights = c(0.0,0.0,0.0) <- ./*[powerUsage]
        >swAbsorptivityTop = 0.0 [0;1]
        >swReflectivityTop = 0.0 [0;1]
        >swTransmissivityTop = 1.0 [0;1]
        >swAbsorptivityBottom = 0.0 [0;1]
        >swReflectivityBottom = 0.0 [0;1]
        >swTransmissivityBottom = 1.0 [0;1]
        >lwAbsorptivityTop = 0.0 [0;1]
        >lwReflectivityTop = 0.0 [0;1]
        >lwTransmissivityTop = 1.0 [0;1]
        >lwAbsorptivityBottom = 0.0 [0;1]
        >lwReflectivityBottom = 0.0 [0;1]
        >lwTransmissivityBottom = 1.0 [0;1]
        >Utop = 0.0 W/K/m2 ground
        >Ubottom = 0.0 W/K/m2 ground
        >heatCapacity = 0.0 J/K/m2 ground
        >parEmissionBottom = 0.0 micromole PAR/m2/s
        >swEmissionBottom = 0.0 W/m2
        >lwEmissionBottom = 0.0 W/m2
        >lwEmissionTop = 0.0 W/m2
        >convectionBottom = 0.0 W/m2
        >convectionTop = 0.0 W/m2
        >powerUsage = 0.0 W/m2
        Box products
          GrowthLightProduct None
            .power = 0.0 W const
            .ballast = 0.0 W const
            .parPhotonCoef = 0.0 micromole PAR/J const
            .propSw = 0.0 [0;1] const
            .propLw = 0.0 [0;1] const
            .propConv = 1.0 [0;1] const
            .propBallastLw = 0.0 [0;1] const
            .propBallastConv = 1.0 [0;1] const
            .minPeriodOn = 0.0 min const
          GrowthLightProduct E_HP_Na_1000W
            .power = 1035.0 W const
            .ballast = 15.0 W const
            .parPhotonCoef = 1.787 micromole PAR/J const
            .propSw = 0.2 [0;1] const
            .propLw = 0.1 [0;1] const
            .propConv = 0.7 [0;1] const
            .propBallastLw = 0.2 [0;1] const
            .propBallastConv = 0.8 [0;1] const
            .minPeriodOn = 30.0 min const
        ActuatorGrowthLight bank3
          .productName = "None" const
          .numberInstalled = 0.5 /m2 const
          .efficiency = 1.0 [0;1] const
          .isOn = FALSE <- controllers/growthLights/bank3[isOn]
          >power = 0.0 W/m2
          >ballast = 0.0 W/m2
          >parEmissionBottom = 0.0 micromole PAR/m2/s
          >swEmissionBottom = 0.0 W/m2
          >lwEmissionBottom = 0.0 W/m2
          >lwEmissionTop = 0.0 W/m2
          >convectionBottom = 0.0 W/m2
          >convectionTop = 0.0 W/m2
          >minPeriodOn = 0.0 min
          >powerUsage = 0.0 W/m2
        ActuatorGrowthLight bank2
          .productName = "None" const
          .numberInstalled = 0.25 /m2 const
          .efficiency = 1.0 [0;1] const
          .isOn = FALSE <- controllers/growthLights/bank2[isOn]
          >power = 0.0 W/m2
          >ballast = 0.0 W/m2
          >parEmissionBottom = 0.0 micromole PAR/m2/s
          >swEmissionBottom = 0.0 W/m2
          >lwEmissionBottom = 0.0 W/m2
          >lwEmissionTop = 0.0 W/m2
          >convectionBottom = 0.0 W/m2
          >convectionTop = 0.0 W/m2
          >minPeriodOn = 0.0 min
          >powerUsage = 0.0 W/m2
        ActuatorGrowthLight bank1
          .productName = "E_HP_Na_1000W" const
          .numberInstalled = 0.25 /m2 const
          .efficiency = 1.0 [0;1] const
          .isOn = FALSE <- controllers/growthLights/bank1[isOn]
          >power = 0.0 W/m2
          >ballast = 0.0 W/m2
          >parEmissionBottom = 0.0 micromole PAR/m2/s
          >swEmissionBottom = 0.0 W/m2
          >lwEmissionBottom = 0.0 W/m2
          >lwEmissionTop = 0.0 W/m2
          >convectionBottom = 0.0 W/m2
          >convectionTop = 0.0 W/m2
          >minPeriodOn = 0.0 min
          >powerUsage = 0.0 W/m2
      Accumulator co2
        .initial = 0.0 const
        .change = 0.0 <- ./controller[controlVariable]
        .minValue = 0.0 const
        .maxValue = 0.0 <- controllers/co2/max[value]
        >value = 0.0
        >signal = 0.0
        PidController controller
          .sensedValue = 0.0 <- indoors[co2]
          .desiredValue = 0.0 <- setpoints/co2/concentration[value]
          .Kprop = 0.05 const
          .Kint = 0.0 /min const
          .Kderiv = 0.0 min const
          .minimum = -1.79769e+308 const
          .maximum = 1.79769e+308 const
          .timeStep = 0.0 s <- calendar[timeStepSecs]
          >controlVariable = 0.0
          >error = 0.0
          >integral = 0.0 min
          >derivative = 0.0 /min
    Plant plant
      .checkBoundaries = FALSE const
      .k_sw = 0.7 [0;1] const
      .k_lw = 1.0 [0;1] const
      .sigma = 0.2 const
      .g0 = 0.1 m/s const
      .g1 = 1.64 m3/mol const
      .re = 200.0 m/s const
      .lai = 2.5 m2/m2 const
      .coverage = 0.95 m2/m2 const
      .Jmax = 145.52 μmol/m2/s const
      .Vcmax = 71.61 μmol/m2/s const
      .GammaStar = 55.47 ppm const
      .Km = 600.0 Pa const
      .Rd0 = 0.74 μmol/m2/s const
      .alpha = 0.24 const
      .theta = 0.85 const
      .EaVJ = 29680.0 const
      .EdVJ = 200000.0 const
      .delsJ = 631.88 const
      .EaVC = 58550.0 const
      .EdVC = 200000.0 const
      .delsC = 629.26 const
      .Q10 = 1.03 const
      .indoorsTemperature = 0.0 <- gh/budget/indoors[temperature]
      .indoorsRh = 0.0 <- gh/budget/indoors[rh]
      .indoorsCo2 = 0.0 <- gh/budget/indoors[co2]
      .timeStep = 0.0 <- calendar[timeStepSecs]
      >swAbsorptivityTop = 0.0 [0;1]
      >swReflectivityTop = 0.0 [0;1]
      >swTransmissivityTop = 1.0 [0;1]
      >swAbsorptivityBottom = 0.0 [0;1]
      >swReflectivityBottom = 0.0 [0;1]
      >swTransmissivityBottom = 1.0 [0;1]
      >lwAbsorptivityTop = 0.0 [0;1]
      >lwReflectivityTop = 0.0 [0;1]
      >lwTransmissivityTop = 1.0 [0;1]
      >lwAbsorptivityBottom = 0.0 [0;1]
      >lwReflectivityBottom = 0.0 [0;1]
      >lwTransmissivityBottom = 1.0 [0;1]
      >Utop = 0.0 W/K/m2 ground
      >Ubottom = 0.0 W/K/m2 ground
      >heatCapacity = 0.0 J/K/m2 ground
      >temperature = 0.0 oC
      >transpiration = 0.0 kg/m2 ground/s
      >incidentPar = 0.0 mymol PAR/m2 ground/s
      >Pn = 0.0 μmol CO2/m2 ground/s
      >Pg = 0.0 μmol CO2/m2 ground/s
      >Rd = 0.0 μmol CO2/m2 ground/s
      >growthRate = 0.0 g carbohydrate/m2 ground
      >leafAm = 0.0 μmol CO2/m2 leaf/s
      >leafAc = 0.0 μmol CO2/m2 leaf/s
      >leafAj = 0.0 μmol CO2/m2 leaf/s
      >leafRd = 0.0 μmol CO2/m2 leaf/s
      >leafGrowthRate = 0.0 g carbohydrate/m2 leaf
      >lue = 0.0 g carbohydrate/micromole PAR absorbed
    Floor floor
      .checkBoundaries = FALSE const
      .swAbsorptivityTop = 0.6 [0;1] const
      .swReflectivityTop = 0.4 [0;1] const
      .swTransmissivityTop = 0.0 [0;1] const
      .swAbsorptivityBottom = 0.0 [0;1] const
      .swReflectivityBottom = 0.0 [0;1] const
      .swTransmissivityBottom = 1.0 [0;1] const
      .lwAbsorptivityTop = 0.6 [0;1] const
      .lwReflectivityTop = 0.4 [0;1] const
      .lwTransmissivityTop = 0.0 [0;1] const
      .lwAbsorptivityBottom = 0.0 [0;1] const
      .lwReflectivityBottom = 0.0 [0;1] const
      .lwTransmissivityBottom = 1.0 [0;1] const
      .Utop = 7.5 W/K/m2 layer const
      .Ubottom = 0.1 W/K/m2 layer const
      .heatCapacity = 42000.0 J/K/m2 layer const
    Budget budget
      .radPrecision = 0.1 W/m2|mumol/m2/s const
      .tempPrecision = 2.0 K const
      .writeHighRes = FALSE const
      .timeStep = 0.0 <- calendar[timeStepSecs]
      .averageHeight = 0.0 <- gh/geometry[averageHeight]
      .coverPerGroundArea = 0.0 <- gh/geometry[coverPerGroundArea]
      .outdoorsTemperature = 0.0 <- outdoors[temperature]
      .outdoorsRh = 0.0 <- outdoors[rh]
      .outdoorsCo2 = 400.0 <- outdoors[co2]
      .transpirationRate = 0.0 <- gh/plant[transpiration]
      .Pn = 0.0 <- gh/plant[Pn]
      .co2Injection = 0.0 <- gh/actuators/co2[value]
      .heatPipeFlux = 0.0 <- gh/actuators/heatPipes[heatFlux]
      .heatPipesOn = c(FALSE,FALSE) <- gh/actuators/heatPipes/*[isHeating]
      .isVentilating = FALSE <- gh/actuators/ventilation[isVentilating]
      .isHeating = FALSE <- gh/actuators/heatPipes[isHeating]
      .babyTimeStep = 1.0 s const
      .step = 0 <- sim[step]
      .dateTime = null <- calendar[dateTime]
      >subDateTime = null
      >subTimeStep = 0.0 s
      >subSteps = 0
      >radIterations = 0
      >maxDeltaT = 0.0 K
      >transpiration = 0.0 kg/m2
      >condensation = 0.0 kg/m2
      >ventedWater = 0.0 kg/m2
      >ventilationHeatLoss = 0.0 W/m2
      >indoorsSensibleHeatFlux = 0.0 W/m2
      >indoorsLatentHeatFlux = 0.0 W/m2
      >coverLatentHeatFlux = 0.0 W/m2
      BudgetVolume outdoorsVol
        .initTemperature = 0.0 oC <- /outdoors[temperature]
        .initRh = 0.0 % <- /outdoors[rh]
        .initCo2 = 400.0 ppm const
        >temperature = 0.0 oC <- /outdoors[temperature]
        >rh = 0.0 % <- /outdoors[rh]
        >co2 = 0.0 ppm
        >heatInflux = 0.0 W/m2
      BudgetVolume indoors
        .initTemperature = 20.0 oC const
        .initRh = 70.0 % const
        .initCo2 = 400.0 ppm const
        >temperature = 0.0 oC
        >rh = 0.0 %
        >co2 = 0.0 ppm
        >heatInflux = 0.0 W/m2
      BudgetVolume soilVol
        .initTemperature = 0.0 oC <- soilTemperature[value]
        .initRh = 70.0 % const
        .initCo2 = 400.0 ppm const
        >temperature = 0.0 oC <- soilTemperature[value]
        >rh = 0.0 %
        >co2 = 0.0 ppm
        >heatInflux = 0.0 W/m2
      BudgetLayerSky sky
        .initTemperature = 20.0 oC const
        >temperature = 0.0 <- /sky[temperature]
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0 <- outdoors[radiation]
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0 <- outdoors[par]
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayerCover cover
        .initTemperature = 20.0 oC const
        .coverPerGroundArea = 0.0 <- gh/geometry[coverPerGroundArea]
        .indoorsRh = 0.0 <- indoors[rh]
        >temperature = 0.0
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
        >condInsideDeltaT = 0.0 oC
        >condOutsideDeltaT = 0.0 oC
      BudgetLayerScreen screen1
        .initTemperature = 20.0 oC const
        .coverPerGroundArea = 0.0 <- gh/geometry[coverPerGroundArea]
        .indoorsRh = 0.0 <- indoors[rh]
        >temperature = 0.0
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayerScreen screen2
        .initTemperature = 20.0 oC const
        .coverPerGroundArea = 0.0 <- gh/geometry[coverPerGroundArea]
        .indoorsRh = 0.0 <- indoors[rh]
        >temperature = 0.0
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayerScreen screen3
        .initTemperature = 20.0 oC const
        .coverPerGroundArea = 0.0 <- gh/geometry[coverPerGroundArea]
        .indoorsRh = 0.0 <- indoors[rh]
        >temperature = 0.0
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayer growthLights
        .initTemperature = 20.0 oC const
        >temperature = 0.0
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0 <- actuators/growthLights[swEmissionBottom]
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0 <- actuators/growthLights[lwEmissionTop]
        >lwEmissionBottom = 0.0 <- actuators/growthLights[lwEmissionBottom]
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0 <- actuators/growthLights[parEmissionBottom]
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0 <- actuators/growthLights[convectionTop]
        >convectionBottom = 0.0 <- actuators/growthLights[convectionBottom]
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayer plant
        .initTemperature = 0.0 oC <- gh/plant[temperature]
        >temperature = 0.0 <- gh/plant[temperature]
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayer heatPipes
        .initTemperature = 20.0 oC const
        >temperature = 0.0 <- actuators/heatPipes[inflowTemperatureAvg]
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0 <- actuators/heatPipes[lwEmissionTop]
        >lwEmissionBottom = 0.0 <- actuators/heatPipes[lwEmissionBottom]
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0 <- actuators/heatPipes[convectionTop]
        >convectionBottom = 0.0 <- actuators/heatPipes[convectionBottom]
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
      BudgetLayerFloor floor
        .initTemperature = 20.0 oC const
        .indoorsRh = 0.0 <- indoors[rh]
        >temperature = 0.0
        >swEmissionTop = 0.0
        >swEmissionBottom = 0.0
        >swFlowTop = 0.0
        >swFlowBottom = 0.0
        >swAbsorbedTop = 0.0
        >swAbsorbedBottom = 0.0
        >lwEmissionTop = 0.0
        >lwEmissionBottom = 0.0
        >lwFlowTop = 0.0
        >lwFlowBottom = 0.0
        >lwAbsorbedTop = 0.0
        >lwAbsorbedBottom = 0.0
        >parEmissionTop = 0.0
        >parEmissionBottom = 0.0
        >parFlowTop = 0.0
        >parFlowBottom = 0.0
        >parAbsorbedTop = 0.0
        >parAbsorbedBottom = 0.0
        >convectionTop = 0.0
        >convectionBottom = 0.0
        >radiationDeltaT = 0.0 oC
        >convectionDeltaT = 0.0 oC
        >totalDeltaT = 0.0 oC
        >condensation = 0.0 kg/m2
        >netRadiation = 0.0 W/m2
        >netConvection = 0.0 W/m2
  OutputR output
    .keepPlots = TRUE const
    .clearMemory = FALSE const
    .showPlots = TRUE const
    .showLines = 0 const
    .popUp = FALSE const
    .width = 7.0 const
    .height = 7.0 const
    .maximizeWindow = FALSE const
    .fontSize = 0.0 const
    .plotAsList = FALSE const
    .saveDataFrame = FALSE const
    .skipFormats = FALSE <- OutputWriter::*[skipFormats]
    .code = "" const
    .scripts = c() const
    .plotTypes = c("default") <- PlotR::*[type]
    .clearPlots = FALSE const
    >ports = ./PageR::*[xAxis]|./*/PlotR::*[ports] <- ./PageR::*[xAxis]|./*/PlotR::*[ports]
    >numPages = 0
    Box variables
      &Uoutside = 0.0 <- shelter/layers/cover[UtopAdj]
      &Uinside = 0.0 <- shelter/layers/cover[UbottomAdj]
      &transpiration = 0.0 <- budget[transpiration]
      &spVentilationTemperature = 0.0 <- controllers/heating/desiredIndoorsTemperature[value]
      &spHeatingTemperature = 0.0 <- controllers/ventilation/desiredIndoorsTemperature[value]
      &spCo2 = 0.0 <- setpoints/co2/concentration[value]
      &soilT = 0.0 <- outdoors[soilTemperature]
      &skyT = 0.0 <- budget/sky[temperature]
      &sensibleVentFlux = 0.0 <- budget[ventilationHeatLoss]
      &screen3T = 0.0 <- budget/screen3[temperature]
      &screen2T = 0.0 <- budget/screen2[temperature]
      &screen1T = 0.0 <- budget/screen1[temperature]
      &respirationRate = 0.0 <- plant[Rd]
      &pipeT = 0.0 <- budget/heatPipes[temperature]
      &outdoorsWindSpeed = 0.0 <- outdoors[windSpeed]
      &outdoorsT = 0.0 <- outdoors[temperature]
      &outdoorsRh = 0.0 <- outdoors[rh]
      &outdoorsPar = 0.0 <- outdoors[par]
      &outdoorsLight = 0.0 <- outdoors[radiation]
      &netGrowthRateLeaf = 0.0 <- plant[leafGrowthRate]
      &netGrowthRate = 0.0 <- plant[growthRate]
      &netAssimilationRate = 0.0 <- plant[Pn]
      &lwEmissionCover = 0.0 <- budget/cover[lwEmissionTop]
      &lwAbsorbedCover = 0.0 <- budget/cover[lwAbsorbedTop]
      &lightUseEfficiency = 0.0 <- plant[lue]
      &leafT = 0.0 <- budget/plant[temperature]
      &indoorsTotalPar = 0.0 <- plant[incidentPar]
      &indoorsT = 0.0 <- budget/indoors[temperature]
      &indoorsRh = 0.0 <- budget/indoors[rh]
      &indoorsGrowthLightPar = 0.0 <- actuators/growthLights[parEmissionBottom]
      &indoorsCo2 = 0.0 <- budget/indoors[co2]
      &heatFluxFloor = 0.0 <- budget/cover[convectionBottom]
      &heatFluxCover = 0.0 <- budget/cover[convectionTop]
      &grossAssimilationRate = 0.0 <- plant[Pg]
      &floorT = 0.0 <- budget/floor[temperature]
      &coverT = 0.0 <- budget/cover[temperature]
      &condensation = 0.0 <- budget[condensation]
      &ventOpening = 0.0 <- actuators/ventilation[opening]
      &airFluxTotal = 0.0 <- actuators/ventilation[value]
      &actVentilation = 0.0 <- actuators/ventilation[ventFlux]
      &actScreen3 = 0.0 <- actuators/screens/layer3[state]
      &actScreen2 = 0.0 <- actuators/screens/layer2[state]
      &actScreen1 = 0.0 <- actuators/screens/layer1[state]
      &actPipeTempOut2 = 0.0 <- actuators/heatPipes/circuit2[outflowTemperature]
      &actPipeTempOut1 = 0.0 <- actuators/heatPipes/circuit1[outflowTemperature]
      &actPipeTempIn2 = 0.0 <- actuators/heatPipes/circuit2[inflowTemperature]
      &actPipeTempIn1 = 0.0 <- actuators/heatPipes/circuit1[inflowTemperature]
      &actLightPower = 0.0 <- actuators/growthLights[powerUsage]
      &actLightPar = 0.0 <- actuators/growthLights[parEmissionBottom]
      &actLight3 = 0.0 <- actuators/growthLights/bank3[powerUsage]
      &actLight2 = 0.0 <- actuators/growthLights/bank2[powerUsage]
      &actLight1 = 0.0 <- actuators/growthLights/bank1[powerUsage]
      &actHeatingPower = 0.0 <- actuators/heatPipes[heatFlux]
      &actCo2 = 0.0 <- actuators/co2[value]
    PageR 
      .xAxis = calendar[dateTime] <- calendar[dateTime]
      .title = "" const
      .ncol = -1 const
      .nrow = -1 const
      .commonLegend = FALSE const
      .legendPosition = "bottom" const
      .width = 7.0 <- ..[width]
      .height = 7.0 <- ..[height]
      .maximizeWindow = TRUE const
      .fontSize = 0.0 <- ..[fontSize]
      .plotAsList = FALSE <- ..[plotAsList]
      .popUp = FALSE <- ..[popUp]
      .numPages = 0 <- ..[numPages]
      .layouts = c("facetted") <- ./PlotR::*[layout]
      PlotR 
        .ports = output/variables[*]
        .layout = "facetted" const
        .type = "default" const
        .guideTitle = "" const
        .ggplot = "" const
        .end = "" const
        .endCode = "" const
        .maxData = 0 const
        .ncol = -1 const
        .nrow = 7 const
        .direction = "row" const
        .iteration = 0 <- /.[iteration]
        .xAxis = ..[xAxis] <- ..[xAxis]
        .width = 7.0 <- ..[width]
        .height = 7.0 <- ..[height]
        .fontSize = 0 <- ..[fontSize]
        .plotAsList = FALSE <- ..[plotAsList]
    OutputSelector selector
      .beginStep = 0 int const
      .beginDateTime = 2023/01/01T00:00:00 DateTime <- global[beginDate]
      .step = 0 <- /.[step]
      .dateTime = null <- Calendar::*[dateTime]
      .period = 10 const
      .summary = "average" const
      .final = FALSE const
      .useLocalDecimalChar = FALSE const
      .skipFormats = FALSE const
      >isActive = FALSE
      >isSkipping = FALSE
  OutputWriter outputWriter
    .showPorts = FALSE const
    .ports = /.[iteration]|/.[step]|OutputText::*[ports]|OutputR::*[ports] <- /.[iteration]|/.[step]|OutputText::*[ports]|OutputR::*[ports]
    .skipFormats = FALSE <- OutputSelector::*[skipFormats]
    .useLocalDecimalChar = FALSE <- OutputSelector::*[useLocalDecimalChar]
    .isSkipping = FALSE <- OutputSelector::*[isSkipping]
    .isActive = FALSE <- OutputSelector::*[isActive]
    .period = 10 <- OutputSelector::*[period]
    .summary = "average" <- OutputSelector::*[summary]
    >filePath = ""
    >decimalChar = ""

> 